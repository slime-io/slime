syntax = "proto3";

import "config.proto";
import "k8s.io/api/core/v1/generated.proto";

package slime.config.v1alpha1;

option go_package = "slime.io/slime/framework/apis/config/v1alpha1";

message SlimeBootStatus {}

message SlimeBootSpec {
  repeated Config module = 1;
  Component component = 2;
  string namespace = 3;
  string istioNamespace = 4;
  Image image = 5;
  int32 replicaCount = 6;
  Service service = 7;

  ResourceRequirements resources = 8;
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 9;
  map<string, string> nodeSelector = 10;
  k8s.io.api.core.v1.PodSecurityContext podSecurityContext = 11;
  k8s.io.api.core.v1.SecurityContext containerSecurityContext = 12;
  repeated k8s.io.api.core.v1.Toleration tolerations = 13;
  k8s.io.api.core.v1.Affinity affinity = 14;
  repeated k8s.io.api.core.v1.Volume volumes = 15;
  repeated k8s.io.api.core.v1.VolumeMount volumeMounts = 16;

  ServiceAccount serviceAccount = 17;
  repeated string args = 18;
  repeated k8s.io.api.core.v1.EnvVar env = 19;
}

message ServiceAccount { bool create = 1; }

message Component { GlobalSidecar globalSidecar = 1; }

message GlobalSidecar {

  message SidecarInject {
    bool enable = 1;
    string mode = 2;
    map<string, string> labels = 3;
    map<string, string> annotations = 4;
  }
  bool enable = 1;
  int32 port = 2;
  int32 probePort = 3;
  int32 replicas = 4;
  Image image = 5;
  SidecarInject sidecarInject = 6;
  ResourceRequirements resources = 7;
  bool legacyFilterName = 8;
}

message Image {
  string pullPolicy = 1;
  string repository = 2;
  string tag = 3;
}

message Service {
  string type = 1;
  int32 port = 2;
  int32 auxiliaryPort = 3;
  int32 logSourcePort = 4;
  int32 mcpOverXdsPort = 5;
}

// Copy from k8s.io/api/core/v1/generated.proto, and replace the `Quantity` to string
// ResourceRequirements describes the compute resource requirements.
message ResourceRequirements {
  // Limits describes the maximum amount of compute resources allowed.
  // More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  // +optional
  map<string, string> limits = 1;

  // Requests describes the minimum amount of compute resources required.
  // If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
  // otherwise to an implementation-defined value. Requests cannot exceed Limits.
  // More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  // +optional
  map<string, string> requests = 2;

  // Claims lists the names of resources, defined in spec.resourceClaims,
  // that are used by this container.
  //
  // This is an alpha field and requires enabling the
  // DynamicResourceAllocation feature gate.
  //
  // This field is immutable. It can only be set for containers.
  //
  // +listType=map
  // +listMapKey=name
  // +featureGate=DynamicResourceAllocation
  // +optional
  repeated k8s.io.api.core.v1.ResourceClaim claims = 3;
}
