//
// @Author: yangdihang
// @Date: 2020/5/21

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: envoy_plugin.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// `WorkloadSelector` specifies the criteria used to determine if the
// `Gateway`, `Sidecar`, or `EnvoyFilter` or `ServiceEntry`
// configuration can be applied to a proxy. The matching criteria
// includes the metadata associated with a proxy, workload instance
// info such as labels attached to the pod/VM, or any other info that
// the proxy provides to Istio during the initial handshake. If
// multiple conditions are specified, all conditions need to match in
// order for the workload instance to be selected. Currently, only
// label based selection mechanism is supported.
type WorkloadSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more labels that indicate a specific set of pods/VMs
	// on which the configuration should be applied. The scope of
	// label search is restricted to the configuration namespace in which the
	// the resource is present.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkloadSelector) Reset() {
	*x = WorkloadSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSelector) ProtoMessage() {}

func (x *WorkloadSelector) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSelector.ProtoReflect.Descriptor instead.
func (*WorkloadSelector) Descriptor() ([]byte, []int) {
	return file_envoy_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *WorkloadSelector) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// EnvoyPluginSpec used to specify the configuration of EnvoyFilter.
// The generated EnvoyFilter can be applied to all level of the RDS:
//
// - Route: route level
// - VirtualHost: virtual host level
// - RouteConfiguration: route configuration level
//
// example:
// ```
// apiVersion: microservice.slime.io/v1alpha1
// kind: EnvoyPlugin
// metadata:
//
//	name: project1-3-458-rewrite
//
// spec:
//
//	host:
//	- 103.196.65.178
//	plugins:
//	- name: com.netease.rewrite
//	  settings:
//	    request_transformations:
//	    - conditions:
//	      - headers:
//	        - name: :path
//	          regex_match: /aaaaaaa/(.*)
//	      transformation_template:
//	        extractors:
//	          $1:
//	            header: :path
//	            regex: /aaaaaaa/(.*)
//	            subgroup: 1
//	        headers:
//	          :path:
//	            text: /{{$1}}
//	        parse_body_behavior: DontParse
//
// ```
type EnvoyPluginSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route level plugin
	Route []string `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty"`
	// virtualHost level plugin
	Host []string `protobuf:"bytes,2,rep,name=host,proto3" json:"host,omitempty"`
	// service level plugin
	// Not implemented and will be deleted
	Service []string  `protobuf:"bytes,3,rep,name=service,proto3" json:"service,omitempty"`
	Plugins []*Plugin `protobuf:"bytes,4,rep,name=plugins,proto3" json:"plugins,omitempty"`
	// which gateway should use this plugin setting
	// Not implemented
	Gateway []string `protobuf:"bytes,5,rep,name=gateway,proto3" json:"gateway,omitempty"`
	// which user should use this plugin setting
	// Not implemented and will be deleted
	User []string `protobuf:"bytes,6,rep,name=user,proto3" json:"user,omitempty"`
	// Deprecated
	IsGroupSetting bool `protobuf:"varint,7,opt,name=isGroupSetting,proto3" json:"isGroupSetting,omitempty"`
	// Listener used to build the name of RouteConfiguration, which means the
	// RouteConfiguration level plugin
	Listener []*EnvoyPluginSpec_Listener `protobuf:"bytes,8,rep,name=listener,proto3" json:"listener,omitempty"`
	// workload selector
	WorkloadSelector *WorkloadSelector `protobuf:"bytes,9,opt,name=workload_selector,json=workloadSelector,proto3" json:"workload_selector,omitempty"`
	// priority defines the order in which patch sets are applied within a
	// context.
	Priority int32 `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *EnvoyPluginSpec) Reset() {
	*x = EnvoyPluginSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvoyPluginSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyPluginSpec) ProtoMessage() {}

func (x *EnvoyPluginSpec) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyPluginSpec.ProtoReflect.Descriptor instead.
func (*EnvoyPluginSpec) Descriptor() ([]byte, []int) {
	return file_envoy_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *EnvoyPluginSpec) GetRoute() []string {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *EnvoyPluginSpec) GetHost() []string {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *EnvoyPluginSpec) GetService() []string {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *EnvoyPluginSpec) GetPlugins() []*Plugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *EnvoyPluginSpec) GetGateway() []string {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *EnvoyPluginSpec) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *EnvoyPluginSpec) GetIsGroupSetting() bool {
	if x != nil {
		return x.IsGroupSetting
	}
	return false
}

func (x *EnvoyPluginSpec) GetListener() []*EnvoyPluginSpec_Listener {
	if x != nil {
		return x.Listener
	}
	return nil
}

func (x *EnvoyPluginSpec) GetWorkloadSelector() *WorkloadSelector {
	if x != nil {
		return x.WorkloadSelector
	}
	return nil
}

func (x *EnvoyPluginSpec) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Listener used to build the name of RouteConfiguration, which means the
// RouteConfiguration level plugin For sidecar proxy, it could be:
// - UDS
// - hostname:port
// - port
// For gateway proxy, it could be:
// - http.port[.bind]
// - generic.appprotocol.port[.bind]
// - https(todo)
type EnvoyPluginSpec_Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port number of the server listening on.
	// Required.
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Outbound ...
	// Unused and will be deleted
	Outbound bool `protobuf:"varint,2,opt,name=outbound,proto3" json:"outbound,omitempty"`
	// PortName is the name of the port. Valid formal is "http[-xxx]" or
	// "generic-appprotocl[-xxx]". It is used to build route name for gateway
	// proxy. Required.
	PortName string `protobuf:"bytes,3,opt,name=portName,proto3" json:"portName,omitempty"`
	// Bind address of the server listening on. If the port is equal to 0, the
	// bind should be UDS. Optional.
	Bind string `protobuf:"bytes,4,opt,name=bind,proto3" json:"bind,omitempty"`
	// Hosts is a list of sniffed services.
	// It is used to build route name for sidecar proxy.
	// Optional.
	Hosts []string `protobuf:"bytes,5,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Sidecar indicates whether the config is for sidecar proxy.
	// If set to false means the config is for gateway proxy. otherwise, it is
	// for sidecar proxy.
	Sidecar bool `protobuf:"varint,6,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
}

func (x *EnvoyPluginSpec_Listener) Reset() {
	*x = EnvoyPluginSpec_Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvoyPluginSpec_Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyPluginSpec_Listener) ProtoMessage() {}

func (x *EnvoyPluginSpec_Listener) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyPluginSpec_Listener.ProtoReflect.Descriptor instead.
func (*EnvoyPluginSpec_Listener) Descriptor() ([]byte, []int) {
	return file_envoy_plugin_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EnvoyPluginSpec_Listener) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EnvoyPluginSpec_Listener) GetOutbound() bool {
	if x != nil {
		return x.Outbound
	}
	return false
}

func (x *EnvoyPluginSpec_Listener) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *EnvoyPluginSpec_Listener) GetBind() string {
	if x != nil {
		return x.Bind
	}
	return ""
}

func (x *EnvoyPluginSpec_Listener) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *EnvoyPluginSpec_Listener) GetSidecar() bool {
	if x != nil {
		return x.Sidecar
	}
	return false
}

var File_envoy_plugin_proto protoreflect.FileDescriptor

var file_envoy_plugin_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x14, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7,
	0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x04, 0x0a, 0x0f, 0x45, 0x6e, 0x76,
	0x6f, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x9a, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x69,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x42, 0x2c, 0x5a, 0x2a, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x73,
	0x6c, 0x69, 0x6d, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_plugin_proto_rawDescOnce sync.Once
	file_envoy_plugin_proto_rawDescData = file_envoy_plugin_proto_rawDesc
)

func file_envoy_plugin_proto_rawDescGZIP() []byte {
	file_envoy_plugin_proto_rawDescOnce.Do(func() {
		file_envoy_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_plugin_proto_rawDescData)
	})
	return file_envoy_plugin_proto_rawDescData
}

var file_envoy_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_envoy_plugin_proto_goTypes = []interface{}{
	(*WorkloadSelector)(nil),         // 0: slime.microservice.plugin.v1alpha1.WorkloadSelector
	(*EnvoyPluginSpec)(nil),          // 1: slime.microservice.plugin.v1alpha1.EnvoyPluginSpec
	nil,                              // 2: slime.microservice.plugin.v1alpha1.WorkloadSelector.LabelsEntry
	(*EnvoyPluginSpec_Listener)(nil), // 3: slime.microservice.plugin.v1alpha1.EnvoyPluginSpec.Listener
	(*Plugin)(nil),                   // 4: slime.microservice.plugin.v1alpha1.Plugin
}
var file_envoy_plugin_proto_depIdxs = []int32{
	2, // 0: slime.microservice.plugin.v1alpha1.WorkloadSelector.labels:type_name -> slime.microservice.plugin.v1alpha1.WorkloadSelector.LabelsEntry
	4, // 1: slime.microservice.plugin.v1alpha1.EnvoyPluginSpec.plugins:type_name -> slime.microservice.plugin.v1alpha1.Plugin
	3, // 2: slime.microservice.plugin.v1alpha1.EnvoyPluginSpec.listener:type_name -> slime.microservice.plugin.v1alpha1.EnvoyPluginSpec.Listener
	0, // 3: slime.microservice.plugin.v1alpha1.EnvoyPluginSpec.workload_selector:type_name -> slime.microservice.plugin.v1alpha1.WorkloadSelector
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_envoy_plugin_proto_init() }
func file_envoy_plugin_proto_init() {
	if File_envoy_plugin_proto != nil {
		return
	}
	file_plugin_manager_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_envoy_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvoyPluginSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvoyPluginSpec_Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_plugin_proto_goTypes,
		DependencyIndexes: file_envoy_plugin_proto_depIdxs,
		MessageInfos:      file_envoy_plugin_proto_msgTypes,
	}.Build()
	File_envoy_plugin_proto = out.File
	file_envoy_plugin_proto_rawDesc = nil
	file_envoy_plugin_proto_goTypes = nil
	file_envoy_plugin_proto_depIdxs = nil
}
