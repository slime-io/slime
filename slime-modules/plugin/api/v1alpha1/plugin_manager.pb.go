// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apis/microservice/v1alpha1/plugin_manager.proto

package v1alpha1

import (
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Plugin_ListenerType int32

const (
	Plugin_Outbound Plugin_ListenerType = 0
	Plugin_Inbound  Plugin_ListenerType = 1
)

var Plugin_ListenerType_name = map[int32]string{
	0: "Outbound",
	1: "Inbound",
}

var Plugin_ListenerType_value = map[string]int32{
	"Outbound": 0,
	"Inbound":  1,
}

func (x Plugin_ListenerType) String() string {
	return proto.EnumName(Plugin_ListenerType_name, int32(x))
}

func (Plugin_ListenerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b828c45d9f521e4, []int{1, 0}
}

type PluginManager struct {
	// Zero or more labels that indicate a specific set of pods/VMs whose
	// proxies should be configured to use these additional filters.  The
	// scope of label search is platform dependent. On Kubernetes, for
	// example, the scope includes pods running in all reachable
	// namespaces. Omitting the selector applies the filter to all proxies in
	// the mesh.
	WorkloadLabels map[string]string `protobuf:"bytes,1,rep,name=workload_labels,json=workloadLabels,proto3" json:"workload_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Plugin         []*Plugin         `protobuf:"bytes,2,rep,name=plugin,proto3" json:"plugin,omitempty"`
	// Names of gateways where the rule should be applied to. Gateway names
	// at the top of the VirtualService (if any) are overridden. The gateway
	// match is independent of sourceLabels.
	Gateways             []string `protobuf:"bytes,3,rep,name=gateways,proto3" json:"gateways,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginManager) Reset()         { *m = PluginManager{} }
func (m *PluginManager) String() string { return proto.CompactTextString(m) }
func (*PluginManager) ProtoMessage()    {}
func (*PluginManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b828c45d9f521e4, []int{0}
}

func (m *PluginManager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginManager.Unmarshal(m, b)
}

func (m *PluginManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginManager.Marshal(b, m, deterministic)
}

func (m *PluginManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginManager.Merge(m, src)
}

func (m *PluginManager) XXX_Size() int {
	return xxx_messageInfo_PluginManager.Size(m)
}

func (m *PluginManager) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginManager.DiscardUnknown(m)
}

var xxx_messageInfo_PluginManager proto.InternalMessageInfo

func (m *PluginManager) GetWorkloadLabels() map[string]string {
	if m != nil {
		return m.WorkloadLabels
	}
	return nil
}

func (m *PluginManager) GetPlugin() []*Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

func (m *PluginManager) GetGateways() []string {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type Plugin struct {
	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated
	Settings     *types.Struct       `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	ListenerType Plugin_ListenerType `protobuf:"varint,4,opt,name=listenerType,proto3,enum=slime.microservice.v1alpha1.Plugin_ListenerType" json:"listenerType,omitempty"`
	TypeUrl      string              `protobuf:"bytes,5,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// Types that are valid to be assigned to PluginSettings:
	//	*Plugin_Wasm
	//	*Plugin_Inline
	PluginSettings       isPlugin_PluginSettings `protobuf_oneof:"plugin_settings"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Plugin) Reset()         { *m = Plugin{} }
func (m *Plugin) String() string { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()    {}
func (*Plugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b828c45d9f521e4, []int{1}
}

func (m *Plugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plugin.Unmarshal(m, b)
}

func (m *Plugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plugin.Marshal(b, m, deterministic)
}

func (m *Plugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugin.Merge(m, src)
}

func (m *Plugin) XXX_Size() int {
	return xxx_messageInfo_Plugin.Size(m)
}

func (m *Plugin) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugin.DiscardUnknown(m)
}

var xxx_messageInfo_Plugin proto.InternalMessageInfo

type isPlugin_PluginSettings interface {
	isPlugin_PluginSettings()
}

type Plugin_Wasm struct {
	Wasm *Wasm `protobuf:"bytes,6,opt,name=wasm,proto3,oneof"`
}

type Plugin_Inline struct {
	Inline *Inline `protobuf:"bytes,7,opt,name=inline,proto3,oneof"`
}

func (*Plugin_Wasm) isPlugin_PluginSettings()   {}
func (*Plugin_Inline) isPlugin_PluginSettings() {}

func (m *Plugin) GetPluginSettings() isPlugin_PluginSettings {
	if m != nil {
		return m.PluginSettings
	}
	return nil
}

func (m *Plugin) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Plugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plugin) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Plugin) GetListenerType() Plugin_ListenerType {
	if m != nil {
		return m.ListenerType
	}
	return Plugin_Outbound
}

func (m *Plugin) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *Plugin) GetWasm() *Wasm {
	if x, ok := m.GetPluginSettings().(*Plugin_Wasm); ok {
		return x.Wasm
	}
	return nil
}

func (m *Plugin) GetInline() *Inline {
	if x, ok := m.GetPluginSettings().(*Plugin_Inline); ok {
		return x.Inline
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Plugin) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Plugin_OneofMarshaler, _Plugin_OneofUnmarshaler, _Plugin_OneofSizer, []interface{}{
		(*Plugin_Wasm)(nil),
		(*Plugin_Inline)(nil),
	}
}

func _Plugin_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Plugin)
	// plugin_settings
	switch x := m.PluginSettings.(type) {
	case *Plugin_Wasm:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Wasm); err != nil {
			return err
		}
	case *Plugin_Inline:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inline); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Plugin.PluginSettings has unexpected type %T", x)
	}
	return nil
}

func _Plugin_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Plugin)
	switch tag {
	case 6: // plugin_settings.wasm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Wasm)
		err := b.DecodeMessage(msg)
		m.PluginSettings = &Plugin_Wasm{msg}
		return true, err
	case 7: // plugin_settings.inline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Inline)
		err := b.DecodeMessage(msg)
		m.PluginSettings = &Plugin_Inline{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Plugin_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Plugin)
	// plugin_settings
	switch x := m.PluginSettings.(type) {
	case *Plugin_Wasm:
		s := proto.Size(x.Wasm)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Plugin_Inline:
		s := proto.Size(x.Inline)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Wasm struct {
	RootID               string        `protobuf:"bytes,1,opt,name=rootID,proto3" json:"rootID,omitempty"`
	FileName             string        `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Settings             *types.Struct `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Wasm) Reset()         { *m = Wasm{} }
func (m *Wasm) String() string { return proto.CompactTextString(m) }
func (*Wasm) ProtoMessage()    {}
func (*Wasm) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b828c45d9f521e4, []int{2}
}

func (m *Wasm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wasm.Unmarshal(m, b)
}

func (m *Wasm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wasm.Marshal(b, m, deterministic)
}

func (m *Wasm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wasm.Merge(m, src)
}

func (m *Wasm) XXX_Size() int {
	return xxx_messageInfo_Wasm.Size(m)
}

func (m *Wasm) XXX_DiscardUnknown() {
	xxx_messageInfo_Wasm.DiscardUnknown(m)
}

var xxx_messageInfo_Wasm proto.InternalMessageInfo

func (m *Wasm) GetRootID() string {
	if m != nil {
		return m.RootID
	}
	return ""
}

func (m *Wasm) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Wasm) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

type Inline struct {
	Settings             *types.Struct `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Inline) Reset()         { *m = Inline{} }
func (m *Inline) String() string { return proto.CompactTextString(m) }
func (*Inline) ProtoMessage()    {}
func (*Inline) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b828c45d9f521e4, []int{3}
}

func (m *Inline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Inline.Unmarshal(m, b)
}

func (m *Inline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Inline.Marshal(b, m, deterministic)
}

func (m *Inline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inline.Merge(m, src)
}

func (m *Inline) XXX_Size() int {
	return xxx_messageInfo_Inline.Size(m)
}

func (m *Inline) XXX_DiscardUnknown() {
	xxx_messageInfo_Inline.DiscardUnknown(m)
}

var xxx_messageInfo_Inline proto.InternalMessageInfo

func (m *Inline) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

func init() {
	proto.RegisterEnum("slime.microservice.v1alpha1.Plugin_ListenerType", Plugin_ListenerType_name, Plugin_ListenerType_value)
	proto.RegisterType((*PluginManager)(nil), "slime.microservice.v1alpha1.PluginManager")
	proto.RegisterMapType((map[string]string)(nil), "slime.microservice.v1alpha1.PluginManager.WorkloadLabelsEntry")
	proto.RegisterType((*Plugin)(nil), "slime.microservice.v1alpha1.Plugin")
	proto.RegisterType((*Wasm)(nil), "slime.microservice.v1alpha1.Wasm")
	proto.RegisterType((*Inline)(nil), "slime.microservice.v1alpha1.Inline")
}

func init() {
	proto.RegisterFile("pkg/apis/microservice/v1alpha1/plugin_manager.proto", fileDescriptor_3b828c45d9f521e4)
}

var fileDescriptor_3b828c45d9f521e4 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x9b, 0xb6, 0x4b, 0xbb, 0xdb, 0xb2, 0x0d, 0x83, 0x20, 0x14, 0x1e, 0x4a, 0x78, 0x09,
	0x0f, 0x38, 0xac, 0x7d, 0x00, 0x81, 0x86, 0xc4, 0x04, 0xd2, 0x2a, 0x8d, 0x3f, 0x0a, 0x43, 0x93,
	0x78, 0xa9, 0x9c, 0xce, 0x0b, 0x56, 0x1d, 0x3b, 0xb2, 0x9d, 0x56, 0xf9, 0x16, 0x3c, 0xf0, 0x81,
	0x51, 0x9c, 0xb4, 0xb4, 0x12, 0xaa, 0x2a, 0xde, 0x7c, 0xa2, 0xfb, 0x3b, 0xf7, 0xfa, 0x5c, 0x07,
	0xc6, 0xd9, 0x3c, 0x09, 0x49, 0xc6, 0x74, 0x98, 0xb2, 0x99, 0x92, 0x9a, 0xaa, 0x05, 0x9b, 0xd1,
	0x70, 0x71, 0x4a, 0x78, 0xf6, 0x93, 0x9c, 0x86, 0x19, 0xcf, 0x13, 0x26, 0xa6, 0x29, 0x11, 0x24,
	0xa1, 0x0a, 0x67, 0x4a, 0x1a, 0x89, 0x1e, 0x6b, 0xce, 0x52, 0x8a, 0x37, 0x09, 0xbc, 0x22, 0x06,
	0x4f, 0x12, 0x29, 0x13, 0x4e, 0x43, 0x5b, 0x1a, 0xe7, 0xb7, 0xa1, 0x36, 0x2a, 0x9f, 0x99, 0x0a,
	0xf5, 0x7f, 0x37, 0xe1, 0xce, 0x57, 0xeb, 0xf9, 0xa9, 0xb2, 0x44, 0x09, 0x1c, 0x2f, 0xa5, 0x9a,
	0x73, 0x49, 0x6e, 0xa6, 0x9c, 0xc4, 0x94, 0x6b, 0xcf, 0x19, 0xb6, 0x82, 0xde, 0xe8, 0x1d, 0xde,
	0xd1, 0x06, 0x6f, 0x99, 0xe0, 0xeb, 0xda, 0xe1, 0xd2, 0x1a, 0x7c, 0x14, 0x46, 0x15, 0xd1, 0xd1,
	0x72, 0xeb, 0x23, 0x7a, 0x0b, 0x6e, 0x75, 0x1b, 0xaf, 0x69, 0xfd, 0x9f, 0xed, 0xe1, 0x1f, 0xd5,
	0x08, 0x1a, 0x40, 0x37, 0x21, 0x86, 0x2e, 0x49, 0xa1, 0xbd, 0xd6, 0xb0, 0x15, 0x1c, 0x46, 0x6b,
	0x3d, 0x78, 0x0f, 0xf7, 0xfe, 0xd1, 0x1f, 0x9d, 0x40, 0x6b, 0x4e, 0x0b, 0xcf, 0x19, 0x3a, 0xc1,
	0x61, 0x54, 0x1e, 0xd1, 0x7d, 0x38, 0x58, 0x10, 0x9e, 0x53, 0xaf, 0x69, 0xbf, 0x55, 0xe2, 0x4d,
	0xf3, 0xb5, 0xe3, 0xff, 0x6a, 0x81, 0x5b, 0x75, 0x44, 0x0f, 0xc0, 0xa5, 0x82, 0xc4, 0x9c, 0x5a,
	0xb2, 0x1b, 0xd5, 0x0a, 0x21, 0x68, 0x0b, 0x92, 0xae, 0x58, 0x7b, 0x46, 0x63, 0xe8, 0x6a, 0x6a,
	0x0c, 0x13, 0x49, 0x39, 0x95, 0x13, 0xf4, 0x46, 0x0f, 0x71, 0x15, 0x3f, 0x5e, 0xc5, 0x8f, 0xbf,
	0xd9, 0xf8, 0xa3, 0x75, 0x21, 0xba, 0x82, 0x3e, 0x67, 0xda, 0x50, 0x41, 0xd5, 0x55, 0x91, 0x51,
	0xaf, 0x3d, 0x74, 0x82, 0xa3, 0xd1, 0xcb, 0x3d, 0xd2, 0xc0, 0x97, 0x1b, 0x5c, 0xb4, 0xe5, 0x82,
	0x1e, 0x41, 0xd7, 0x14, 0x19, 0x9d, 0xe6, 0x8a, 0x7b, 0x07, 0x76, 0xc4, 0x4e, 0xa9, 0xbf, 0x2b,
	0x8e, 0x5e, 0x41, 0x7b, 0x49, 0x74, 0xea, 0xb9, 0x76, 0xc2, 0xa7, 0x3b, 0x1b, 0x5d, 0x13, 0x9d,
	0x5e, 0x34, 0x22, 0x0b, 0xa0, 0x33, 0x70, 0x99, 0xe0, 0x4c, 0x50, 0xaf, 0x63, 0xd1, 0xdd, 0x1b,
	0x9b, 0xd8, 0xd2, 0x8b, 0x46, 0x54, 0x43, 0xfe, 0x73, 0xe8, 0x6f, 0x0e, 0x8c, 0xfa, 0xd0, 0xfd,
	0x92, 0x9b, 0x58, 0xe6, 0xe2, 0xe6, 0xa4, 0x81, 0x7a, 0xd0, 0x99, 0x88, 0x4a, 0x38, 0xe7, 0x77,
	0xe1, 0xb8, 0x7e, 0xe9, 0xab, 0x98, 0x7c, 0x09, 0xed, 0x72, 0x98, 0x72, 0x1f, 0x4a, 0x4a, 0x33,
	0xf9, 0x50, 0x6f, 0xb2, 0x56, 0xe5, 0x8b, 0xb8, 0x65, 0x9c, 0x7e, 0xfe, 0xbb, 0x93, 0xb5, 0xfe,
	0xaf, 0xbd, 0xf8, 0x67, 0xe0, 0x56, 0x57, 0xd8, 0xc2, 0x9d, 0x3d, 0xf1, 0xf3, 0xf0, 0xc7, 0x8b,
	0x2a, 0x1d, 0x26, 0x43, 0x7b, 0x08, 0x77, 0xff, 0xda, 0xb1, 0x6b, 0xbd, 0xc6, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x4b, 0xf7, 0xf9, 0x3b, 0x03, 0x04, 0x00, 0x00,
}
