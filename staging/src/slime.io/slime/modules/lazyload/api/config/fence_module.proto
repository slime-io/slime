/*
* @Author: wangchenyu
* @Date: 2022/2/23
*/

syntax = "proto3";

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

package slime.microservice.lazyload.config;

option go_package = "slime.io/slime/modules/lazyload/api/config";

// +kubebuilder:pruning:PreserveUnknownFields
message Fence {
  // service ports enable lazyload
  repeated string wormholePort = 1;
  // whether enable ServiceFence auto generating
  // default value is false
  bool autoFence = 2;
  // the namespace list which enable lazyload
  repeated string namespace = 3;
  // custom outside dispatch traffic rules
  repeated Dispatch dispatches = 4;
  // can convert to one or many domain alias rules
  repeated DomainAlias domainAliases = 5;
  // default behavior of create fence or not when autoFence is true
  // default value is false
  bool defaultFence = 6;
  // whether enable http service port auto management
  // default value is false
  bool autoPort = 7;
  // specify the ns of global-siecar, same as slimeNamespace by default
  string clusterGsNamespace = 8;
  // specify label key and alias to generate sf
  string fenceLabelKeyAlias = 9;
  // enableShortDomain, it will generate fqdn and short domain if enabled, otherwise only fqdn is generated in svf and sidecar
  bool enableShortDomain = 10;
  // deprecated
  // disable ipv4 passthrough
  // mainly deal with compatibility issues with older versions of istio
  // if set true, all ipv4 request will route to global-sidecar
  // default is false, all ipv4 request will route to global-sidecar
  bool disableIpv4Passthrough = 11;
  // passthroughByDefault, if set true, all request will route to PassthroughCluster
  bool passthroughByDefault = 12;
  // grpc and http2 will be supported
  bool supportH2 = 13;
  // addEnvHeaderViaLua, if set true
  // add header Slime-Orig-Dest Slime-Source-Ns via lua
  bool addEnvHeaderViaLua = 14;
  // global sidecar mode, cluster or namespace
  string globalSidecarMode = 15;
  // if value is "lazyload", render chart by itself
  string render = 16;
  // metric source type, prometheus or accesslog
  string metricSourceType = 17;
  // it will clean up wormholeport if the port is deleted when value is true
  bool cleanupWormholePort = 18;

  // A list of Kubernetes selectors that specify the set of namespaces that Istio considers when
  // injecting sidecar or refreshing certificates. This can be used to reduce interference between
  // different control planes within the same cluster. If omitted, Istio will use the default
  // behavior of processing all namespaces in the cluster.
  // Elements in the list are disjunctive (OR semantics), i.e. a namespace will be included if it matches any selector.
  // The following example selects any namespace that matches either below:
  // 1. The namespace has both of these labels: `env: prod` and `region: us-east1`
  // 2. The namespace has label `app` equal to `cassandra` or `spark`.
  // ```yaml
  // managementSelectors:
  //   - matchLabels:
  //       env: prod
  //       region: us-east1
  //   - matchExpressions:
  //     - key: app
  //       operator: In
  //       values:
  //         - cassandra
  //         - spark
  // ```
  // Refer to the [kubernetes selector docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors)
  // for additional detail on selector semantics.
  // when autoFence is true, managementSelectors will take effect
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector managementSelectors = 19;

  // A list of namespaces that should be excluded or include
  //  when autoFence is true, namespaceList will take effect
  oneof namespaceList {
    string blackNamespaceList = 20;
    string whiteNamespaceList = 21;
  }

  // A regular expression in golang regex format (RE2) that can be used to select proxies using a specific version of istio proxy to apply the to_global_sidecar envoyfilter.
  // refer to https://istio.io/latest/docs/reference/config/networking/envoy-filter/#EnvoyFilter-ProxyMatch
  string proxyVersion = 22;
}

// The general idea is to assign different default traffic to different targets
// for correct processing by means of domain matching.
message Dispatch {
  // dispatch rule name
  string name = 1;
  // domain matching contents
  repeated string domains = 2;
  // target cluster
  string cluster = 3;
  // google re2 regex expression
  // forward matching request to the cluster
  string domainRegex = 4;
}

// DomainAlias regexp expression, which is alias for target domain
// default value is empty
// example:
// domainAliases:
//   - pattern: (?P<service>[^\.]+)\.(?P<namespace>[^\.]+)\.svc\.cluster\.local$
//     template:
//       - $namespace.$service.service.mailsaas
message DomainAlias {
  string pattern = 1;
  repeated string templates = 2;
}
