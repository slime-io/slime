//
// @Author: yangdihang
// @Date: 2020/5/21

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: smart_limiter.proto

package v1alpha2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SmartLimitDescriptor_Matcher_Source int32

const (
	// headers
	SmartLimitDescriptor_Matcher_HeadMatch SmartLimitDescriptor_Matcher_Source = 0
	// query params
	SmartLimitDescriptor_Matcher_QueryMatch SmartLimitDescriptor_Matcher_Source = 1
	// json body
	SmartLimitDescriptor_Matcher_JsonBodyMatch SmartLimitDescriptor_Matcher_Source = 2
	// source ip address
	SmartLimitDescriptor_Matcher_SourceIpMatch SmartLimitDescriptor_Matcher_Source = 3
)

// Enum value maps for SmartLimitDescriptor_Matcher_Source.
var (
	SmartLimitDescriptor_Matcher_Source_name = map[int32]string{
		0: "HeadMatch",
		1: "QueryMatch",
		2: "JsonBodyMatch",
		3: "SourceIpMatch",
	}
	SmartLimitDescriptor_Matcher_Source_value = map[string]int32{
		"HeadMatch":     0,
		"QueryMatch":    1,
		"JsonBodyMatch": 2,
		"SourceIpMatch": 3,
	}
)

func (x SmartLimitDescriptor_Matcher_Source) Enum() *SmartLimitDescriptor_Matcher_Source {
	p := new(SmartLimitDescriptor_Matcher_Source)
	*p = x
	return p
}

func (x SmartLimitDescriptor_Matcher_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmartLimitDescriptor_Matcher_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_smart_limiter_proto_enumTypes[0].Descriptor()
}

func (SmartLimitDescriptor_Matcher_Source) Type() protoreflect.EnumType {
	return &file_smart_limiter_proto_enumTypes[0]
}

func (x SmartLimitDescriptor_Matcher_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmartLimitDescriptor_Matcher_Source.Descriptor instead.
func (SmartLimitDescriptor_Matcher_Source) EnumDescriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{2, 0, 0}
}

type SmartLimiterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subset rate-limit,the key is subset name.
	Sets map[string]*SmartLimitDescriptors `protobuf:"bytes,1,rep,name=sets,proto3" json:"sets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// deprecated, mv to limiter_module.proto
	Rls string `protobuf:"bytes,2,opt,name=rls,proto3" json:"rls,omitempty"` // rls 服务地址
	// workload selector , it should not be nil in Gateway Scenarios
	WorkloadSelector map[string]string `protobuf:"bytes,4,rep,name=workloadSelector,proto3" json:"workloadSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// is gateway
	Gateway bool `protobuf:"varint,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// hostname specify svc host
	Host string `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	// rate limit target
	Target *Target `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *SmartLimiterSpec) Reset() {
	*x = SmartLimiterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartLimiterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartLimiterSpec) ProtoMessage() {}

func (x *SmartLimiterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartLimiterSpec.ProtoReflect.Descriptor instead.
func (*SmartLimiterSpec) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{0}
}

func (x *SmartLimiterSpec) GetSets() map[string]*SmartLimitDescriptors {
	if x != nil {
		return x.Sets
	}
	return nil
}

func (x *SmartLimiterSpec) GetRls() string {
	if x != nil {
		return x.Rls
	}
	return ""
}

func (x *SmartLimiterSpec) GetWorkloadSelector() map[string]string {
	if x != nil {
		return x.WorkloadSelector
	}
	return nil
}

func (x *SmartLimiterSpec) GetGateway() bool {
	if x != nil {
		return x.Gateway
	}
	return false
}

func (x *SmartLimiterSpec) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SmartLimiterSpec) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type SmartLimiterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RatelimitStatus map[string]*SmartLimitDescriptors `protobuf:"bytes,1,rep,name=ratelimitStatus,proto3" json:"ratelimitStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetricStatus    map[string]string                 `protobuf:"bytes,2,rep,name=metricStatus,proto3" json:"metricStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SmartLimiterStatus) Reset() {
	*x = SmartLimiterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartLimiterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartLimiterStatus) ProtoMessage() {}

func (x *SmartLimiterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartLimiterStatus.ProtoReflect.Descriptor instead.
func (*SmartLimiterStatus) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{1}
}

func (x *SmartLimiterStatus) GetRatelimitStatus() map[string]*SmartLimitDescriptors {
	if x != nil {
		return x.RatelimitStatus
	}
	return nil
}

func (x *SmartLimiterStatus) GetMetricStatus() map[string]string {
	if x != nil {
		return x.MetricStatus
	}
	return nil
}

type SmartLimitDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition   string                          `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Action      *SmartLimitDescriptor_Action    `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Match       []*SmartLimitDescriptor_Matcher `protobuf:"bytes,3,rep,name=match,proto3" json:"match,omitempty"`
	Target      *Target                         `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	CustomKey   string                          `protobuf:"bytes,5,opt,name=custom_key,json=customKey,proto3" json:"custom_key,omitempty"`
	CustomValue string                          `protobuf:"bytes,6,opt,name=custom_value,json=customValue,proto3" json:"custom_value,omitempty"`
}

func (x *SmartLimitDescriptor) Reset() {
	*x = SmartLimitDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartLimitDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartLimitDescriptor) ProtoMessage() {}

func (x *SmartLimitDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartLimitDescriptor.ProtoReflect.Descriptor instead.
func (*SmartLimitDescriptor) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{2}
}

func (x *SmartLimitDescriptor) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *SmartLimitDescriptor) GetAction() *SmartLimitDescriptor_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *SmartLimitDescriptor) GetMatch() []*SmartLimitDescriptor_Matcher {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *SmartLimitDescriptor) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SmartLimitDescriptor) GetCustomKey() string {
	if x != nil {
		return x.CustomKey
	}
	return ""
}

func (x *SmartLimitDescriptor) GetCustomValue() string {
	if x != nil {
		return x.CustomValue
	}
	return ""
}

type SmartLimitDescriptors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of current rate-limit
	Descriptor_ []*SmartLimitDescriptor `protobuf:"bytes,1,rep,name=descriptor,proto3" json:"descriptor,omitempty"`
}

func (x *SmartLimitDescriptors) Reset() {
	*x = SmartLimitDescriptors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartLimitDescriptors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartLimitDescriptors) ProtoMessage() {}

func (x *SmartLimitDescriptors) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartLimitDescriptors.ProtoReflect.Descriptor instead.
func (*SmartLimitDescriptors) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{3}
}

func (x *SmartLimitDescriptors) GetDescriptor_() []*SmartLimitDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed seconds of the span of time. Must be from -315,576,000,000
	// to +315,576,000,000 inclusive. Note: these bounds are computed from:
	// 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
	Seconds int32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Signed fractions of a second at nanosecond resolution of the span
	// of time. Durations less than one second are represented with a 0
	// `seconds` field and a positive or negative `nanos` field. For durations
	// of one second or more, a non-zero value for the `nanos` field must be
	// of the same sign as the `seconds` field. Must be from -999,999,999
	// to +999,999,999 inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{4}
}

func (x *Duration) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Duration) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction string   `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"` // 进出
	Port      int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Route     []string `protobuf:"bytes,3,rep,name=route,proto3" json:"route,omitempty"`
	Host      []string `protobuf:"bytes,4,rep,name=host,proto3" json:"host,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{5}
}

func (x *Target) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Target) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Target) GetRoute() []string {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Target) GetHost() []string {
	if x != nil {
		return x.Host
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{6}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SmartLimitDescriptor_Matcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If specified, this regex string is a regular expression rule which implies the entire request
	// header value must match the regex. The rule will not match if only a subsequence of the
	// request header value matches the regex.
	RegexMatch string `protobuf:"bytes,2,opt,name=regex_match,json=regexMatch,proto3" json:"regex_match,omitempty"`
	// If specified, header match will be performed based on the value of the header.
	ExactMatch string `protobuf:"bytes,3,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
	// * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*.
	PrefixMatch string `protobuf:"bytes,4,opt,name=prefix_match,json=prefixMatch,proto3" json:"prefix_match,omitempty"`
	// * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*.
	SuffixMatch string `protobuf:"bytes,5,opt,name=suffix_match,json=suffixMatch,proto3" json:"suffix_match,omitempty"`
	// If specified as true, header match will be performed based on whether the header is in the
	// request. If specified as false, header match will be performed based on whether the header is absent.
	PresentMatch bool `protobuf:"varint,6,opt,name=present_match,json=presentMatch,proto3" json:"present_match,omitempty"`
	// If specified, the match result will be inverted before checking. Defaults to false.
	// * The regex “\d{3}“ does not match the value *1234*, so it will match when inverted.
	InvertMatch bool `protobuf:"varint,7,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	// if specified, the exact match the value ""
	IsExactMatchEmpty bool `protobuf:"varint,8,opt,name=is_exact_match_empty,json=isExactMatchEmpty,proto3" json:"is_exact_match_empty,omitempty"`
	// similar to present_match, the difference is that the different values have separate token
	// while present_match shares token
	// it only works in envoy.filters.http.ratelimit (global)
	PresentMatchSeparate bool `protobuf:"varint,9,opt,name=present_match_separate,json=presentMatchSeparate,proto3" json:"present_match_separate,omitempty"`
	// deprecated
	// if query_match is true, ues query match instead of header match
	UseQueryMatch bool `protobuf:"varint,10,opt,name=useQueryMatch,proto3" json:"useQueryMatch,omitempty"`
	// match source, from header or query or json body
	MatchSource SmartLimitDescriptor_Matcher_Source `protobuf:"varint,11,opt,name=matchSource,proto3,enum=slime.microservice.limiter.v1alpha2.SmartLimitDescriptor_Matcher_Source" json:"matchSource,omitempty"`
}

func (x *SmartLimitDescriptor_Matcher) Reset() {
	*x = SmartLimitDescriptor_Matcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartLimitDescriptor_Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartLimitDescriptor_Matcher) ProtoMessage() {}

func (x *SmartLimitDescriptor_Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartLimitDescriptor_Matcher.ProtoReflect.Descriptor instead.
func (*SmartLimitDescriptor_Matcher) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SmartLimitDescriptor_Matcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SmartLimitDescriptor_Matcher) GetRegexMatch() string {
	if x != nil {
		return x.RegexMatch
	}
	return ""
}

func (x *SmartLimitDescriptor_Matcher) GetExactMatch() string {
	if x != nil {
		return x.ExactMatch
	}
	return ""
}

func (x *SmartLimitDescriptor_Matcher) GetPrefixMatch() string {
	if x != nil {
		return x.PrefixMatch
	}
	return ""
}

func (x *SmartLimitDescriptor_Matcher) GetSuffixMatch() string {
	if x != nil {
		return x.SuffixMatch
	}
	return ""
}

func (x *SmartLimitDescriptor_Matcher) GetPresentMatch() bool {
	if x != nil {
		return x.PresentMatch
	}
	return false
}

func (x *SmartLimitDescriptor_Matcher) GetInvertMatch() bool {
	if x != nil {
		return x.InvertMatch
	}
	return false
}

func (x *SmartLimitDescriptor_Matcher) GetIsExactMatchEmpty() bool {
	if x != nil {
		return x.IsExactMatchEmpty
	}
	return false
}

func (x *SmartLimitDescriptor_Matcher) GetPresentMatchSeparate() bool {
	if x != nil {
		return x.PresentMatchSeparate
	}
	return false
}

func (x *SmartLimitDescriptor_Matcher) GetUseQueryMatch() bool {
	if x != nil {
		return x.UseQueryMatch
	}
	return false
}

func (x *SmartLimitDescriptor_Matcher) GetMatchSource() SmartLimitDescriptor_Matcher_Source {
	if x != nil {
		return x.MatchSource
	}
	return SmartLimitDescriptor_Matcher_HeadMatch
}

type SmartLimitDescriptor_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quota        string    `protobuf:"bytes,1,opt,name=quota,proto3" json:"quota,omitempty"`                                     // 配额
	FillInterval *Duration `protobuf:"bytes,2,opt,name=fill_interval,json=fillInterval,proto3" json:"fill_interval,omitempty"`   // 时间
	Strategy     string    `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`                               // 策略
	HeadersToAdd []*Header `protobuf:"bytes,4,rep,name=headers_to_add,json=headersToAdd,proto3" json:"headers_to_add,omitempty"` // 增添的请求头
}

func (x *SmartLimitDescriptor_Action) Reset() {
	*x = SmartLimitDescriptor_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smart_limiter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartLimitDescriptor_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartLimitDescriptor_Action) ProtoMessage() {}

func (x *SmartLimitDescriptor_Action) ProtoReflect() protoreflect.Message {
	mi := &file_smart_limiter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartLimitDescriptor_Action.ProtoReflect.Descriptor instead.
func (*SmartLimitDescriptor_Action) Descriptor() ([]byte, []int) {
	return file_smart_limiter_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SmartLimitDescriptor_Action) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *SmartLimitDescriptor_Action) GetFillInterval() *Duration {
	if x != nil {
		return x.FillInterval
	}
	return nil
}

func (x *SmartLimitDescriptor_Action) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *SmartLimitDescriptor_Action) GetHeadersToAdd() []*Header {
	if x != nil {
		return x.HeadersToAdd
	}
	return nil
}

var File_smart_limiter_proto protoreflect.FileDescriptor

var file_smart_limiter_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x22, 0x9f, 0x04, 0x0a, 0x10, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x53, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x6c, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x1a, 0x73, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x03, 0x0a,
	0x12, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x76, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x73,
	0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x7e, 0x0a, 0x14, 0x52, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x09, 0x0a, 0x14,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x6c,
	0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb5, 0x04, 0x0a,
	0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x14,
	0x69, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x45, 0x78,
	0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x6a, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48,
	0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x10, 0x03, 0x1a, 0xe1, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x51, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x22, 0x72, 0x0a, 0x15, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x59, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x08,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0x64, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x30,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x33, 0x5a, 0x31, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x6c, 0x69,
	0x6d, 0x65, 0x2f, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_smart_limiter_proto_rawDescOnce sync.Once
	file_smart_limiter_proto_rawDescData = file_smart_limiter_proto_rawDesc
)

func file_smart_limiter_proto_rawDescGZIP() []byte {
	file_smart_limiter_proto_rawDescOnce.Do(func() {
		file_smart_limiter_proto_rawDescData = protoimpl.X.CompressGZIP(file_smart_limiter_proto_rawDescData)
	})
	return file_smart_limiter_proto_rawDescData
}

var file_smart_limiter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_smart_limiter_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_smart_limiter_proto_goTypes = []interface{}{
	(SmartLimitDescriptor_Matcher_Source)(0), // 0: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Matcher.Source
	(*SmartLimiterSpec)(nil),                 // 1: slime.microservice.limiter.v1alpha2.SmartLimiterSpec
	(*SmartLimiterStatus)(nil),               // 2: slime.microservice.limiter.v1alpha2.SmartLimiterStatus
	(*SmartLimitDescriptor)(nil),             // 3: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor
	(*SmartLimitDescriptors)(nil),            // 4: slime.microservice.limiter.v1alpha2.SmartLimitDescriptors
	(*Duration)(nil),                         // 5: slime.microservice.limiter.v1alpha2.Duration
	(*Target)(nil),                           // 6: slime.microservice.limiter.v1alpha2.Target
	(*Header)(nil),                           // 7: slime.microservice.limiter.v1alpha2.Header
	nil,                                      // 8: slime.microservice.limiter.v1alpha2.SmartLimiterSpec.SetsEntry
	nil,                                      // 9: slime.microservice.limiter.v1alpha2.SmartLimiterSpec.WorkloadSelectorEntry
	nil,                                      // 10: slime.microservice.limiter.v1alpha2.SmartLimiterStatus.RatelimitStatusEntry
	nil,                                      // 11: slime.microservice.limiter.v1alpha2.SmartLimiterStatus.MetricStatusEntry
	(*SmartLimitDescriptor_Matcher)(nil),     // 12: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Matcher
	(*SmartLimitDescriptor_Action)(nil),      // 13: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Action
}
var file_smart_limiter_proto_depIdxs = []int32{
	8,  // 0: slime.microservice.limiter.v1alpha2.SmartLimiterSpec.sets:type_name -> slime.microservice.limiter.v1alpha2.SmartLimiterSpec.SetsEntry
	9,  // 1: slime.microservice.limiter.v1alpha2.SmartLimiterSpec.workloadSelector:type_name -> slime.microservice.limiter.v1alpha2.SmartLimiterSpec.WorkloadSelectorEntry
	6,  // 2: slime.microservice.limiter.v1alpha2.SmartLimiterSpec.target:type_name -> slime.microservice.limiter.v1alpha2.Target
	10, // 3: slime.microservice.limiter.v1alpha2.SmartLimiterStatus.ratelimitStatus:type_name -> slime.microservice.limiter.v1alpha2.SmartLimiterStatus.RatelimitStatusEntry
	11, // 4: slime.microservice.limiter.v1alpha2.SmartLimiterStatus.metricStatus:type_name -> slime.microservice.limiter.v1alpha2.SmartLimiterStatus.MetricStatusEntry
	13, // 5: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.action:type_name -> slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Action
	12, // 6: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.match:type_name -> slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Matcher
	6,  // 7: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.target:type_name -> slime.microservice.limiter.v1alpha2.Target
	3,  // 8: slime.microservice.limiter.v1alpha2.SmartLimitDescriptors.descriptor:type_name -> slime.microservice.limiter.v1alpha2.SmartLimitDescriptor
	4,  // 9: slime.microservice.limiter.v1alpha2.SmartLimiterSpec.SetsEntry.value:type_name -> slime.microservice.limiter.v1alpha2.SmartLimitDescriptors
	4,  // 10: slime.microservice.limiter.v1alpha2.SmartLimiterStatus.RatelimitStatusEntry.value:type_name -> slime.microservice.limiter.v1alpha2.SmartLimitDescriptors
	0,  // 11: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Matcher.matchSource:type_name -> slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Matcher.Source
	5,  // 12: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Action.fill_interval:type_name -> slime.microservice.limiter.v1alpha2.Duration
	7,  // 13: slime.microservice.limiter.v1alpha2.SmartLimitDescriptor.Action.headers_to_add:type_name -> slime.microservice.limiter.v1alpha2.Header
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_smart_limiter_proto_init() }
func file_smart_limiter_proto_init() {
	if File_smart_limiter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_smart_limiter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartLimiterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartLimiterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartLimitDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartLimitDescriptors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartLimitDescriptor_Matcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smart_limiter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartLimitDescriptor_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_smart_limiter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_smart_limiter_proto_goTypes,
		DependencyIndexes: file_smart_limiter_proto_depIdxs,
		EnumInfos:         file_smart_limiter_proto_enumTypes,
		MessageInfos:      file_smart_limiter_proto_msgTypes,
	}.Build()
	File_smart_limiter_proto = out.File
	file_smart_limiter_proto_rawDesc = nil
	file_smart_limiter_proto_goTypes = nil
	file_smart_limiter_proto_depIdxs = nil
}
