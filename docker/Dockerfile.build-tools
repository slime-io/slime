FROM golang:1.20.0-bullseye

WORKDIR /workspaces

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        lsb-release \
        software-properties-common \
        jq \
        unzip && \
    apt-get clean

# install docker
ENV DOCKER_VERSION=5:23.0.0-1~debian.11~bullseye
ENV CONTAINERD_VERSION=1.6.16-1
ADD https://download.docker.com/linux/debian/gpg /etc/apt/keyrings/docker.gpg
RUN apt-key add /etc/apt/keyrings/docker.gpg && \
    add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
RUN apt-get update && apt-get install -y --no-install-recommends \
    docker-ce="${DOCKER_VERSION}" \
    docker-ce-cli="${DOCKER_VERSION}" \
    containerd.io="${CONTAINERD_VERSION}" && \
    apt-get clean

# version of toolchains
ENV CONTROLLER_GEN_VERSION=v0.11.0
ENV ISTIO_TOOLS_VERSION=1.19.1
ENV GOLANG_PROTOBUF_VERSION=v1.31.0
ENV PROTOC_VERSION=3.20.1
ENV K8S_API_VERSION=0.26.0

RUN \
    # install controller-gen
    CGO_ENABLED=0 go install -ldflags='-extldflags -static -s -w' sigs.k8s.io/controller-tools/cmd/controller-gen@${CONTROLLER_GEN_VERSION} && \
    # install golang protobuf
    CGO_ENABLED=0 go install -ldflags='-extldflags -static -s -w' google.golang.org/protobuf/cmd/protoc-gen-go@${GOLANG_PROTOBUF_VERSION} && \
    # install istio code-generator
    CGO_ENABLED=0 go install -ldflags='-extldflags -static -s -w' istio.io/tools/cmd/protoc-gen-golang-jsonshim@${ISTIO_TOOLS_VERSION} && \
    CGO_ENABLED=0 go install -ldflags='-extldflags -static -s -w' istio.io/tools/cmd/protoc-gen-golang-deepcopy@${ISTIO_TOOLS_VERSION}

# install k8s api protobuf
RUN mkdir -p ${GOPATH}/src/k8s.io && \
    curl -LO https://github.com/kubernetes/api/archive/refs/tags/v${K8S_API_VERSION}.zip && \
    unzip v${K8S_API_VERSION}.zip -d ${GOPATH}/src/k8s.io && \
    mv ${GOPATH}/src/k8s.io/api-${K8S_API_VERSION} ${GOPATH}/src/k8s.io/api && \
    rm v${K8S_API_VERSION}.zip && \
    curl -LO https://github.com/kubernetes/apimachinery/archive/refs/tags/v${K8S_API_VERSION}.zip && \
    unzip v${K8S_API_VERSION}.zip -d ${GOPATH}/src/k8s.io && \
    mv ${GOPATH}/src/k8s.io/apimachinery-${K8S_API_VERSION} ${GOPATH}/src/k8s.io/apimachinery && \
    rm v${K8S_API_VERSION}.zip

# install protocol compiler
RUN export PB_REL="https://github.com/protocolbuffers/protobuf/releases"; \
    export ARCH=x86_64; \
    if [ $(uname -m) != "x86_64" ]; then \
        export ARCH=aarch_64; \
    fi; \
    curl -LO $PB_REL/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-${ARCH}.zip; \
    unzip protoc-${PROTOC_VERSION}-linux-${ARCH}.zip -d /usr/local; \
    rm protoc-${PROTOC_VERSION}-linux-${ARCH}.zip

ENV GOCACHE ${GOPATH}/.cache
RUN chmod -R 777 "$GOPATH"