/*
 * @Author: yangdihang
 * @Date: 2020/5/21
 */

syntax = "proto3";

import "plugin_manager.proto";

package slime.microservice.plugin.v1alpha1;

option go_package = "slime.io/slime/modules/plugin/api/v1alpha1";

// `WorkloadSelector` specifies the criteria used to determine if the
// `Gateway`, `Sidecar`, or `EnvoyFilter` or `ServiceEntry`
// configuration can be applied to a proxy. The matching criteria
// includes the metadata associated with a proxy, workload instance
// info such as labels attached to the pod/VM, or any other info that
// the proxy provides to Istio during the initial handshake. If
// multiple conditions are specified, all conditions need to match in
// order for the workload instance to be selected. Currently, only
// label based selection mechanism is supported.
message WorkloadSelector {
  // One or more labels that indicate a specific set of pods/VMs
  // on which the configuration should be applied. The scope of
  // label search is restricted to the configuration namespace in which the
  // the resource is present.
  map<string, string> labels = 1;

  // $hide_from_docs
  // other forms of identification supplied by the proxy
  // when connecting to Pilot, such as X509 fields, tenant IDs, JWT,
  // etc. This has nothing to do with the request level authN etc.
}

// EnvoyPluginSpec used to specify the configuration of EnvoyFilter.
// The generated EnvoyFilter can be applied to all level of the RDS:
//
// - Route: route level
// - VirtualHost: virtual host level
// - RouteConfiguration: route configuration level
//
// example:
// ```
// apiVersion: microservice.slime.io/v1alpha1
// kind: EnvoyPlugin
// metadata:
//	 name: project1-3-458-rewrite
// spec:
//	 host:
//	 - 103.196.65.178
//	 plugins:
//	 - name: com.netease.rewrite
//	   settings:
//	     request_transformations:
//	     - conditions:
//	       - headers:
//	         - name: :path
//	           regex_match: /aaaaaaa/(.*)
//	       transformation_template:
//	         extractors:
//	           $1:
//	             header: :path
//	             regex: /aaaaaaa/(.*)
//	             subgroup: 1
//	         headers:
//	           :path:
//	             text: /{{$1}}
//	         parse_body_behavior: DontParse
// ```
message EnvoyPluginSpec {
  // route level plugin
  repeated string route = 1;

  // virtualHost level plugin
  repeated string host = 2;

  // service level plugin
  // Not implemented and will be deleted
  repeated string service = 3;

  repeated Plugin plugins = 4;

  // which gateway should use this plugin setting
  // Not implemented
  repeated string gateway = 5;

  // which user should use this plugin setting
  // Not implemented and will be deleted
  repeated string user = 6;

  // Deprecated
  bool isGroupSetting = 7;

  // Listener used to build the name of RouteConfiguration, which means the
  // RouteConfiguration level plugin For sidecar proxy, it could be:
  // - UDS
  // - hostname:port
  // - port
  // For gateway proxy, it could be:
  // - http.port[.bind]
  // - generic.appprotocol.port[.bind]
  // - https(todo)
  message Listener {
    // Port number of the server listening on.
    // Required.
    uint32 port = 1;
    // Outbound ...
    // Unused and will be deleted
    bool outbound = 2;
    // PortName is the name of the port. Valid formal is "http[-xxx]" or
    // "generic-appprotocl[-xxx]". It is used to build route name for gateway
    // proxy. Required.
    string portName = 3;
    // Bind address of the server listening on. If the port is equal to 0, the
    // bind should be UDS. Optional.
    string bind = 4;
    // Hosts is a list of sniffed services.
    // It is used to build route name for sidecar proxy.
    // Optional.
    repeated string hosts = 5;
    // Sidecar indicates whether the config is for sidecar proxy.
    // If set to false means the config is for gateway proxy. otherwise, it is
    // for sidecar proxy.
    bool sidecar = 6;
  }

  // Listener used to build the name of RouteConfiguration, which means the
  // RouteConfiguration level plugin
  repeated Listener listener = 8;

  // workload selector
  WorkloadSelector workload_selector = 9;
  // priority defines the order in which patch sets are applied within a
  // context.
  int32 priority = 10;
}
