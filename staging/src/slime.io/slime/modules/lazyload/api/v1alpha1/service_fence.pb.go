//
// @Author: yangdihang
// @Date: 2020/5/21

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: service_fence.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Destinations_Status int32

const (
	Destinations_ACTIVE Destinations_Status = 0
	Destinations_EXPIRE Destinations_Status = 1
	// In order to avoid deleting frequently, add status EXPIREWAIT between ACTIVE and EXPIRE.
	// When new metric does not contain host of ACTIVE status, its status will change to EXPIREWAIT. If new metric does not contain
	// host of EXPIREWAIT status, which means this host is not contained in the last two metrics, the status will change to EXPIRE.
	// Otherwise, EXPIREWAIT status will change back to ACTIVE.
	// Hosts of ACTIVE or EXPIREWAIT status are all valid for sidecar.
	// For prometheus metric source, as metric can continuously be watched, we can set status update interval in the future version,
	// refer to RecentlyCalled of RecyclingStrategy. But for accesslog metric source, metric only stores in lazyload controller memory.
	// Metric can not continuously produce after host added to sidecar. So after lazyload controller rebooting, we can not tell whether
	// old host is valid or not until it is removed from sidecar and goes to global-sidecar again.
	// We do not have a proper solution to do same thing for accesslog metric source so far. Need further thinking.
	Destinations_EXPIREWAIT Destinations_Status = 2
)

// Enum value maps for Destinations_Status.
var (
	Destinations_Status_name = map[int32]string{
		0: "ACTIVE",
		1: "EXPIRE",
		2: "EXPIREWAIT",
	}
	Destinations_Status_value = map[string]int32{
		"ACTIVE":     0,
		"EXPIRE":     1,
		"EXPIREWAIT": 2,
	}
)

func (x Destinations_Status) Enum() *Destinations_Status {
	p := new(Destinations_Status)
	*p = x
	return p
}

func (x Destinations_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Destinations_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_service_fence_proto_enumTypes[0].Descriptor()
}

func (Destinations_Status) Type() protoreflect.EnumType {
	return &file_service_fence_proto_enumTypes[0]
}

func (x Destinations_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Destinations_Status.Descriptor instead.
func (Destinations_Status) EnumDescriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{5, 0}
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{0}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

// Spec Example
//
//	spec:
//	 enable: true
//	 host:
//	   reviews.default.svc.cluster.local: # static dependency of reviews.default service
//	     stable:
//	   test/*: {} # static dependency of all services in namespace 'test'
//	 namespaceSelector: # Match namespace names, multiple namespaces are 'or' relations, static dependency
//	   - foo
//	   - bar
//	 labelSelector: # Match service label, multiple selectors are 'or' relationship, static dependency
//	   - selector:
//	       project: back
//	   - selector: # labels in same selector are 'and' relationship
//	       project: front
//	       group: web
//	 workloadSelector:
//	   labels:
//	     group: foo
//	     zone: hz
//	   fromService: false
type ServiceFenceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host map[string]*RecyclingStrategy `protobuf:"bytes,1,rep,name=host,proto3" json:"host,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Switch to render servicefence as sidecar
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// services in these namespaces are all static dependency, will not expire
	NamespaceSelector []string `protobuf:"bytes,3,rep,name=namespaceSelector,proto3" json:"namespaceSelector,omitempty"`
	// services match one selector of the label selector are all static dependency, will not expire
	LabelSelector    []*Selector       `protobuf:"bytes,4,rep,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	WorkloadSelector *WorkloadSelector `protobuf:"bytes,5,opt,name=workloadSelector,proto3" json:"workloadSelector,omitempty"`
}

func (x *ServiceFenceSpec) Reset() {
	*x = ServiceFenceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceFenceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceFenceSpec) ProtoMessage() {}

func (x *ServiceFenceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceFenceSpec.ProtoReflect.Descriptor instead.
func (*ServiceFenceSpec) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceFenceSpec) GetHost() map[string]*RecyclingStrategy {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ServiceFenceSpec) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ServiceFenceSpec) GetNamespaceSelector() []string {
	if x != nil {
		return x.NamespaceSelector
	}
	return nil
}

func (x *ServiceFenceSpec) GetLabelSelector() []*Selector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *ServiceFenceSpec) GetWorkloadSelector() *WorkloadSelector {
	if x != nil {
		return x.WorkloadSelector
	}
	return nil
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector map[string]string `protobuf:"bytes,1,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{2}
}

func (x *Selector) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

type WorkloadSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// take effect when labels is empty
	// true: sidecar.workloadSelector.labels = svc.spec.selector
	// false: sidecar.workloadSelector.labels = map[string]string{env.config.global.service: svc.name}
	FromService bool `protobuf:"varint,1,opt,name=fromService,proto3" json:"fromService,omitempty"`
	// top priority, if labels is not empty, sidecar.workloadSelector.labels = sf.spec.workloadSelector.labels
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkloadSelector) Reset() {
	*x = WorkloadSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadSelector) ProtoMessage() {}

func (x *WorkloadSelector) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadSelector.ProtoReflect.Descriptor instead.
func (*WorkloadSelector) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{3}
}

func (x *WorkloadSelector) GetFromService() bool {
	if x != nil {
		return x.FromService
	}
	return false
}

func (x *WorkloadSelector) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RecyclingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration that will not be cleaned up
	Stable *RecyclingStrategy_Stable `protobuf:"bytes,1,opt,name=stable,proto3" json:"stable,omitempty"`
	// Configurations that expire after expiration
	Deadline *RecyclingStrategy_Deadline `protobuf:"bytes,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// Deprecated
	Auto           *RecyclingStrategy_Auto `protobuf:"bytes,3,opt,name=auto,proto3" json:"auto,omitempty"`
	RecentlyCalled *Timestamp              `protobuf:"bytes,4,opt,name=RecentlyCalled,proto3" json:"RecentlyCalled,omitempty"`
}

func (x *RecyclingStrategy) Reset() {
	*x = RecyclingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecyclingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecyclingStrategy) ProtoMessage() {}

func (x *RecyclingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecyclingStrategy.ProtoReflect.Descriptor instead.
func (*RecyclingStrategy) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{4}
}

func (x *RecyclingStrategy) GetStable() *RecyclingStrategy_Stable {
	if x != nil {
		return x.Stable
	}
	return nil
}

func (x *RecyclingStrategy) GetDeadline() *RecyclingStrategy_Deadline {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *RecyclingStrategy) GetAuto() *RecyclingStrategy_Auto {
	if x != nil {
		return x.Auto
	}
	return nil
}

func (x *RecyclingStrategy) GetRecentlyCalled() *Timestamp {
	if x != nil {
		return x.RecentlyCalled
	}
	return nil
}

type Destinations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated
	RecentlyCalled *Timestamp          `protobuf:"bytes,1,opt,name=RecentlyCalled,proto3" json:"RecentlyCalled,omitempty"`
	Hosts          []string            `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Status         Destinations_Status `protobuf:"varint,3,opt,name=status,proto3,enum=slime.microservice.lazyload.v1alpha1.Destinations_Status" json:"status,omitempty"`
}

func (x *Destinations) Reset() {
	*x = Destinations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destinations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destinations) ProtoMessage() {}

func (x *Destinations) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destinations.ProtoReflect.Descriptor instead.
func (*Destinations) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{5}
}

func (x *Destinations) GetRecentlyCalled() *Timestamp {
	if x != nil {
		return x.RecentlyCalled
	}
	return nil
}

func (x *Destinations) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Destinations) GetStatus() Destinations_Status {
	if x != nil {
		return x.Status
	}
	return Destinations_ACTIVE
}

type ServiceFenceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains      map[string]*Destinations `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetricStatus map[string]string        `protobuf:"bytes,3,rep,name=metricStatus,proto3" json:"metricStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated
	Visitor map[string]bool `protobuf:"bytes,2,rep,name=visitor,proto3" json:"visitor,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ServiceFenceStatus) Reset() {
	*x = ServiceFenceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceFenceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceFenceStatus) ProtoMessage() {}

func (x *ServiceFenceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceFenceStatus.ProtoReflect.Descriptor instead.
func (*ServiceFenceStatus) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceFenceStatus) GetDomains() map[string]*Destinations {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *ServiceFenceStatus) GetMetricStatus() map[string]string {
	if x != nil {
		return x.MetricStatus
	}
	return nil
}

func (x *ServiceFenceStatus) GetVisitor() map[string]bool {
	if x != nil {
		return x.Visitor
	}
	return nil
}

type RecyclingStrategy_Stable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecyclingStrategy_Stable) Reset() {
	*x = RecyclingStrategy_Stable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecyclingStrategy_Stable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecyclingStrategy_Stable) ProtoMessage() {}

func (x *RecyclingStrategy_Stable) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecyclingStrategy_Stable.ProtoReflect.Descriptor instead.
func (*RecyclingStrategy_Stable) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{4, 0}
}

type RecyclingStrategy_Deadline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expire *Timestamp `protobuf:"bytes,1,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *RecyclingStrategy_Deadline) Reset() {
	*x = RecyclingStrategy_Deadline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecyclingStrategy_Deadline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecyclingStrategy_Deadline) ProtoMessage() {}

func (x *RecyclingStrategy_Deadline) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecyclingStrategy_Deadline.ProtoReflect.Descriptor instead.
func (*RecyclingStrategy_Deadline) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{4, 1}
}

func (x *RecyclingStrategy_Deadline) GetExpire() *Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

type RecyclingStrategy_Auto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *Timestamp `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RecyclingStrategy_Auto) Reset() {
	*x = RecyclingStrategy_Auto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_fence_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecyclingStrategy_Auto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecyclingStrategy_Auto) ProtoMessage() {}

func (x *RecyclingStrategy_Auto) ProtoReflect() protoreflect.Message {
	mi := &file_service_fence_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecyclingStrategy_Auto.ProtoReflect.Descriptor instead.
func (*RecyclingStrategy_Auto) Descriptor() ([]byte, []int) {
	return file_service_fence_proto_rawDescGZIP(), []int{4, 2}
}

func (x *RecyclingStrategy_Auto) GetDuration() *Timestamp {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_service_fence_proto protoreflect.FileDescriptor

var file_service_fence_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x3b, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x54, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6c,
	0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x62, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6c, 0x69, 0x6d,
	0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c,
	0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0x70, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x58, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x3b, 0x0a, 0x0d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x04, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x56, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x08,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x53, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x1a, 0x53, 0x0a,
	0x04, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6c,
	0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x57, 0x41, 0x49, 0x54, 0x10, 0x02, 0x22, 0xb3, 0x04, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f,
	0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x6e, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5f, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x1a, 0x6e, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2e, 0x5a,
	0x2c, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_fence_proto_rawDescOnce sync.Once
	file_service_fence_proto_rawDescData = file_service_fence_proto_rawDesc
)

func file_service_fence_proto_rawDescGZIP() []byte {
	file_service_fence_proto_rawDescOnce.Do(func() {
		file_service_fence_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_fence_proto_rawDescData)
	})
	return file_service_fence_proto_rawDescData
}

var file_service_fence_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_fence_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_fence_proto_goTypes = []interface{}{
	(Destinations_Status)(0),           // 0: slime.microservice.lazyload.v1alpha1.Destinations.Status
	(*Timestamp)(nil),                  // 1: slime.microservice.lazyload.v1alpha1.Timestamp
	(*ServiceFenceSpec)(nil),           // 2: slime.microservice.lazyload.v1alpha1.ServiceFenceSpec
	(*Selector)(nil),                   // 3: slime.microservice.lazyload.v1alpha1.Selector
	(*WorkloadSelector)(nil),           // 4: slime.microservice.lazyload.v1alpha1.WorkloadSelector
	(*RecyclingStrategy)(nil),          // 5: slime.microservice.lazyload.v1alpha1.RecyclingStrategy
	(*Destinations)(nil),               // 6: slime.microservice.lazyload.v1alpha1.Destinations
	(*ServiceFenceStatus)(nil),         // 7: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus
	nil,                                // 8: slime.microservice.lazyload.v1alpha1.ServiceFenceSpec.HostEntry
	nil,                                // 9: slime.microservice.lazyload.v1alpha1.Selector.SelectorEntry
	nil,                                // 10: slime.microservice.lazyload.v1alpha1.WorkloadSelector.LabelsEntry
	(*RecyclingStrategy_Stable)(nil),   // 11: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Stable
	(*RecyclingStrategy_Deadline)(nil), // 12: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Deadline
	(*RecyclingStrategy_Auto)(nil),     // 13: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Auto
	nil,                                // 14: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.DomainsEntry
	nil,                                // 15: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.MetricStatusEntry
	nil,                                // 16: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.VisitorEntry
}
var file_service_fence_proto_depIdxs = []int32{
	8,  // 0: slime.microservice.lazyload.v1alpha1.ServiceFenceSpec.host:type_name -> slime.microservice.lazyload.v1alpha1.ServiceFenceSpec.HostEntry
	3,  // 1: slime.microservice.lazyload.v1alpha1.ServiceFenceSpec.labelSelector:type_name -> slime.microservice.lazyload.v1alpha1.Selector
	4,  // 2: slime.microservice.lazyload.v1alpha1.ServiceFenceSpec.workloadSelector:type_name -> slime.microservice.lazyload.v1alpha1.WorkloadSelector
	9,  // 3: slime.microservice.lazyload.v1alpha1.Selector.selector:type_name -> slime.microservice.lazyload.v1alpha1.Selector.SelectorEntry
	10, // 4: slime.microservice.lazyload.v1alpha1.WorkloadSelector.labels:type_name -> slime.microservice.lazyload.v1alpha1.WorkloadSelector.LabelsEntry
	11, // 5: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.stable:type_name -> slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Stable
	12, // 6: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.deadline:type_name -> slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Deadline
	13, // 7: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.auto:type_name -> slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Auto
	1,  // 8: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.RecentlyCalled:type_name -> slime.microservice.lazyload.v1alpha1.Timestamp
	1,  // 9: slime.microservice.lazyload.v1alpha1.Destinations.RecentlyCalled:type_name -> slime.microservice.lazyload.v1alpha1.Timestamp
	0,  // 10: slime.microservice.lazyload.v1alpha1.Destinations.status:type_name -> slime.microservice.lazyload.v1alpha1.Destinations.Status
	14, // 11: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.domains:type_name -> slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.DomainsEntry
	15, // 12: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.metricStatus:type_name -> slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.MetricStatusEntry
	16, // 13: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.visitor:type_name -> slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.VisitorEntry
	5,  // 14: slime.microservice.lazyload.v1alpha1.ServiceFenceSpec.HostEntry.value:type_name -> slime.microservice.lazyload.v1alpha1.RecyclingStrategy
	1,  // 15: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Deadline.expire:type_name -> slime.microservice.lazyload.v1alpha1.Timestamp
	1,  // 16: slime.microservice.lazyload.v1alpha1.RecyclingStrategy.Auto.duration:type_name -> slime.microservice.lazyload.v1alpha1.Timestamp
	6,  // 17: slime.microservice.lazyload.v1alpha1.ServiceFenceStatus.DomainsEntry.value:type_name -> slime.microservice.lazyload.v1alpha1.Destinations
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_service_fence_proto_init() }
func file_service_fence_proto_init() {
	if File_service_fence_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_fence_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceFenceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecyclingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destinations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceFenceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecyclingStrategy_Stable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecyclingStrategy_Deadline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_fence_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecyclingStrategy_Auto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_fence_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_service_fence_proto_goTypes,
		DependencyIndexes: file_service_fence_proto_depIdxs,
		EnumInfos:         file_service_fence_proto_enumTypes,
		MessageInfos:      file_service_fence_proto_msgTypes,
	}.Build()
	File_service_fence_proto = out.File
	file_service_fence_proto_rawDesc = nil
	file_service_fence_proto_goTypes = nil
	file_service_fence_proto_depIdxs = nil
}
