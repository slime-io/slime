// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: config.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Prometheus_Source_Type int32

const (
	Prometheus_Source_Value Prometheus_Source_Type = 0
	Prometheus_Source_Group Prometheus_Source_Type = 1
)

// Enum value maps for Prometheus_Source_Type.
var (
	Prometheus_Source_Type_name = map[int32]string{
		0: "Value",
		1: "Group",
	}
	Prometheus_Source_Type_value = map[string]int32{
		"Value": 0,
		"Group": 1,
	}
)

func (x Prometheus_Source_Type) Enum() *Prometheus_Source_Type {
	p := new(Prometheus_Source_Type)
	*p = x
	return p
}

func (x Prometheus_Source_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Prometheus_Source_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (Prometheus_Source_Type) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x Prometheus_Source_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Prometheus_Source_Type.Descriptor instead.
func (Prometheus_Source_Type) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3, 0}
}

type Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service        string            `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Multicluster   string            `protobuf:"bytes,2,opt,name=multicluster,proto3" json:"multicluster,omitempty"`
	IstioNamespace string            `protobuf:"bytes,3,opt,name=istioNamespace,proto3" json:"istioNamespace,omitempty"`
	SlimeNamespace string            `protobuf:"bytes,4,opt,name=slimeNamespace,proto3" json:"slimeNamespace,omitempty"`
	Log            *Log              `protobuf:"bytes,5,opt,name=log,proto3" json:"log,omitempty"`
	Misc           map[string]string `protobuf:"bytes,6,rep,name=misc,proto3" json:"misc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IstioRev       string            `protobuf:"bytes,7,opt,name=istioRev,proto3" json:"istioRev,omitempty"`
	StrictRev      bool              `protobuf:"varint,8,opt,name=strictRev,proto3" json:"strictRev,omitempty"`
	// ConfigSource describes a source of configuration data for networking
	// rules, and other Istio configuration artifacts. Multiple data sources
	// can be configured for a single control plane.
	ConfigSources []*ConfigSource `protobuf:"bytes,9,rep,name=configSources,proto3" json:"configSources,omitempty"`
	// specify the address of k8s api-server instead of default value
	MasterUrl string `protobuf:"bytes,10,opt,name=masterUrl,proto3" json:"masterUrl,omitempty"`
	// configRev is the value used by slime configController to fetch/filter configs
	// in format comma-separated revisions, e.g. "1-11-1,prod"
	// will add istioRev to configRev if it exists
	ConfigRev string `protobuf:"bytes,11,opt,name=configRev,proto3" json:"configRev,omitempty"`
	// control the maximum QPS to the master from this client
	ClientGoTokenBucket *ClientGoTokenBucket `protobuf:"bytes,12,opt,name=clientGoTokenBucket,proto3" json:"clientGoTokenBucket,omitempty"`
	// if SelfResourceRev is specified, the value of SelfResourceRev will be patched to resources which generated by slime itself, just like serviceFence
	// smartlimiter/envoyplugin/pluginmanager is excluded because these envoyfilter are generated by users or higher-level services
	// envoyfilter/sidecar is excluded because these resources generated base on their owner resources
	SelfResourceRev string `protobuf:"bytes,13,opt,name=selfResourceRev,proto3" json:"selfResourceRev,omitempty"`
	// specify the istio-config-source from which we can get a configs-mirror of relevant istiod.
	IstioConfigSource *ConfigSource `protobuf:"bytes,14,opt,name=istioConfigSource,proto3" json:"istioConfigSource,omitempty"`
	// deploy rev specified by user, used to define the deploy version of slime
	DeployRev string `protobuf:"bytes,15,opt,name=deployRev,proto3" json:"deployRev,omitempty"`
	// enable/disable convert serviceentry to istio res when configsource is specified
	EnableConvertSeToIstioRes bool `protobuf:"varint,16,opt,name=enableConvertSeToIstioRes,proto3" json:"enableConvertSeToIstioRes,omitempty"`
}

func (x *Global) Reset() {
	*x = Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Global) ProtoMessage() {}

func (x *Global) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Global.ProtoReflect.Descriptor instead.
func (*Global) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Global) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Global) GetMulticluster() string {
	if x != nil {
		return x.Multicluster
	}
	return ""
}

func (x *Global) GetIstioNamespace() string {
	if x != nil {
		return x.IstioNamespace
	}
	return ""
}

func (x *Global) GetSlimeNamespace() string {
	if x != nil {
		return x.SlimeNamespace
	}
	return ""
}

func (x *Global) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *Global) GetMisc() map[string]string {
	if x != nil {
		return x.Misc
	}
	return nil
}

func (x *Global) GetIstioRev() string {
	if x != nil {
		return x.IstioRev
	}
	return ""
}

func (x *Global) GetStrictRev() bool {
	if x != nil {
		return x.StrictRev
	}
	return false
}

func (x *Global) GetConfigSources() []*ConfigSource {
	if x != nil {
		return x.ConfigSources
	}
	return nil
}

func (x *Global) GetMasterUrl() string {
	if x != nil {
		return x.MasterUrl
	}
	return ""
}

func (x *Global) GetConfigRev() string {
	if x != nil {
		return x.ConfigRev
	}
	return ""
}

func (x *Global) GetClientGoTokenBucket() *ClientGoTokenBucket {
	if x != nil {
		return x.ClientGoTokenBucket
	}
	return nil
}

func (x *Global) GetSelfResourceRev() string {
	if x != nil {
		return x.SelfResourceRev
	}
	return ""
}

func (x *Global) GetIstioConfigSource() *ConfigSource {
	if x != nil {
		return x.IstioConfigSource
	}
	return nil
}

func (x *Global) GetDeployRev() string {
	if x != nil {
		return x.DeployRev
	}
	return ""
}

func (x *Global) GetEnableConvertSeToIstioRes() bool {
	if x != nil {
		return x.EnableConvertSeToIstioRes
	}
	return false
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel        string           `protobuf:"bytes,1,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	KlogLevel       int32            `protobuf:"varint,2,opt,name=klogLevel,proto3" json:"klogLevel,omitempty"`
	LogRotate       bool             `protobuf:"varint,3,opt,name=logRotate,proto3" json:"logRotate,omitempty"`
	LogRotateConfig *LogRotateConfig `protobuf:"bytes,4,opt,name=logRotateConfig,proto3" json:"logRotateConfig,omitempty"`
	EnableQuote     bool             `protobuf:"varint,5,opt,name=enableQuote,proto3" json:"enableQuote,omitempty"`
	// define ilog scope level
	// default:info,xdsc:warn,mcpc:warn
	IlogLevel string `protobuf:"bytes,6,opt,name=ilogLevel,proto3" json:"ilogLevel,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *Log) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Log) GetKlogLevel() int32 {
	if x != nil {
		return x.KlogLevel
	}
	return 0
}

func (x *Log) GetLogRotate() bool {
	if x != nil {
		return x.LogRotate
	}
	return false
}

func (x *Log) GetLogRotateConfig() *LogRotateConfig {
	if x != nil {
		return x.LogRotateConfig
	}
	return nil
}

func (x *Log) GetEnableQuote() bool {
	if x != nil {
		return x.EnableQuote
	}
	return false
}

func (x *Log) GetIlogLevel() string {
	if x != nil {
		return x.IlogLevel
	}
	return ""
}

type LogRotateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath   string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	MaxSizeMB  int32  `protobuf:"varint,2,opt,name=maxSizeMB,proto3" json:"maxSizeMB,omitempty"`
	MaxBackups int32  `protobuf:"varint,3,opt,name=maxBackups,proto3" json:"maxBackups,omitempty"`
	MaxAgeDay  int32  `protobuf:"varint,4,opt,name=maxAgeDay,proto3" json:"maxAgeDay,omitempty"`
	Compress   bool   `protobuf:"varint,5,opt,name=compress,proto3" json:"compress,omitempty"`
}

func (x *LogRotateConfig) Reset() {
	*x = LogRotateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRotateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRotateConfig) ProtoMessage() {}

func (x *LogRotateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRotateConfig.ProtoReflect.Descriptor instead.
func (*LogRotateConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *LogRotateConfig) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *LogRotateConfig) GetMaxSizeMB() int32 {
	if x != nil {
		return x.MaxSizeMB
	}
	return 0
}

func (x *LogRotateConfig) GetMaxBackups() int32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *LogRotateConfig) GetMaxAgeDay() int32 {
	if x != nil {
		return x.MaxAgeDay
	}
	return 0
}

func (x *LogRotateConfig) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

type Prometheus_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string                                `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Handlers map[string]*Prometheus_Source_Handler `protobuf:"bytes,2,rep,name=handlers,proto3" json:"handlers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Prometheus_Source) Reset() {
	*x = Prometheus_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prometheus_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prometheus_Source) ProtoMessage() {}

func (x *Prometheus_Source) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prometheus_Source.ProtoReflect.Descriptor instead.
func (*Prometheus_Source) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *Prometheus_Source) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Prometheus_Source) GetHandlers() map[string]*Prometheus_Source_Handler {
	if x != nil {
		return x.Handlers
	}
	return nil
}

type K8S_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handlers []string `protobuf:"bytes,1,rep,name=handlers,proto3" json:"handlers,omitempty"`
}

func (x *K8S_Source) Reset() {
	*x = K8S_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8S_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8S_Source) ProtoMessage() {}

func (x *K8S_Source) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8S_Source.ProtoReflect.Descriptor instead.
func (*K8S_Source) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *K8S_Source) GetHandlers() []string {
	if x != nil {
		return x.Handlers
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prometheus *Prometheus_Source `protobuf:"bytes,1,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	K8S        *K8S_Source        `protobuf:"bytes,2,opt,name=k8s,proto3" json:"k8s,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *Metric) GetPrometheus() *Prometheus_Source {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *Metric) GetK8S() *K8S_Source {
	if x != nil {
		return x.K8S
	}
	return nil
}

// +kubebuilder:pruning:PreserveUnknownFields
type General struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *General) Reset() {
	*x = General{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *General) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*General) ProtoMessage() {}

func (x *General) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use General.ProtoReflect.Descriptor instead.
func (*General) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*Bundle_Item `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *Bundle) GetModules() []*Bundle_Item {
	if x != nil {
		return x.Modules
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global  *Global  `protobuf:"bytes,3,opt,name=global,proto3" json:"global,omitempty"`
	Metric  *Metric  `protobuf:"bytes,6,opt,name=metric,proto3" json:"metric,omitempty"`
	Name    string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Enable  bool     `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	General *General `protobuf:"bytes,8,opt,name=general,proto3" json:"general,omitempty"` // general module config
	Bundle  *Bundle  `protobuf:"bytes,9,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Mode    string   `protobuf:"bytes,10,opt,name=mode,proto3" json:"mode,omitempty"`
	// like bundle item kind, necessary if not bundle
	Kind string `protobuf:"bytes,11,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetGlobal() *Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Config) GetMetric() *Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Config) GetGeneral() *General {
	if x != nil {
		return x.General
	}
	return nil
}

func (x *Config) GetBundle() *Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *Config) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Config) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// ConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
type ConfigSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the server implementing the Istio Mesh Configuration
	// protocol (MCP). Can be IP address or a fully qualified DNS name.
	// Use fs:/// to specify a file-based backend with absolute path to the directory.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ConfigSource) Reset() {
	*x = ConfigSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSource) ProtoMessage() {}

func (x *ConfigSource) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSource.ProtoReflect.Descriptor instead.
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigSource) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ClientGoTokenBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// QPS indicates the maximum QPS to the master from this client.
	Qps int32 `protobuf:"varint,1,opt,name=qps,proto3" json:"qps,omitempty"`
	// Maximum burst for throttle.
	Burst int32 `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
}

func (x *ClientGoTokenBucket) Reset() {
	*x = ClientGoTokenBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientGoTokenBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientGoTokenBucket) ProtoMessage() {}

func (x *ClientGoTokenBucket) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientGoTokenBucket.ProtoReflect.Descriptor instead.
func (*ClientGoTokenBucket) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{10}
}

func (x *ClientGoTokenBucket) GetQps() int32 {
	if x != nil {
		return x.Qps
	}
	return 0
}

func (x *ClientGoTokenBucket) GetBurst() int32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

type Prometheus_Source_Handler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Type  Prometheus_Source_Type `protobuf:"varint,2,opt,name=type,proto3,enum=slime.config.v1alpha1.Prometheus_Source_Type" json:"type,omitempty"`
}

func (x *Prometheus_Source_Handler) Reset() {
	*x = Prometheus_Source_Handler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prometheus_Source_Handler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prometheus_Source_Handler) ProtoMessage() {}

func (x *Prometheus_Source_Handler) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prometheus_Source_Handler.ProtoReflect.Descriptor instead.
func (*Prometheus_Source_Handler) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Prometheus_Source_Handler) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Prometheus_Source_Handler) GetType() Prometheus_Source_Type {
	if x != nil {
		return x.Type
	}
	return Prometheus_Source_Value
}

type Bundle_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// submodule name, custom value, necessary
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// submodule kind, can only be one of real module kinds, like limiter, necessary
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *Bundle_Item) Reset() {
	*x = Bundle_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_Item) ProtoMessage() {}

func (x *Bundle_Item) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_Item.ProtoReflect.Descriptor instead.
func (*Bundle_Item) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Bundle_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bundle_Item) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xb2, 0x06, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6c,
	0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x3b, 0x0a, 0x04,
	0x6d, 0x69, 0x73, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69,
	0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0x52, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x74,
	0x69, 0x6f, 0x52, 0x65, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x76, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69,
	0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x76, 0x12, 0x5c, 0x0a, 0x13, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x76, 0x12, 0x51, 0x0a, 0x11, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x11, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52,
	0x65, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x76, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x53, 0x65, 0x54, 0x6f, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x65, 0x54, 0x6f, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x69, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x6b, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6b, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x6c, 0x6f,
	0x67, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x6c, 0x6f, 0x67,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa5, 0x01, 0x0a,
	0x0f, 0x4c, 0x6f, 0x67, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x41, 0x67, 0x65, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x1a, 0x62, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x6d, 0x0a, 0x0d,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x22, 0x28, 0x0a, 0x0a, 0x4b, 0x38, 0x53,
	0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x48,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x38, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x38,
	0x53, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x03, 0x6b, 0x38, 0x73, 0x22, 0x09, 0x0a,
	0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x76, 0x0a, 0x06, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x1a, 0x2e, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0xbb, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c,
	0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x35, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x28,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x71, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x70,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x42, 0x2f, 0x5a, 0x2d, 0x73, 0x6c, 0x69, 0x6d, 0x65,
	0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_config_proto_goTypes = []interface{}{
	(Prometheus_Source_Type)(0),       // 0: slime.config.v1alpha1.Prometheus_Source.Type
	(*Global)(nil),                    // 1: slime.config.v1alpha1.Global
	(*Log)(nil),                       // 2: slime.config.v1alpha1.Log
	(*LogRotateConfig)(nil),           // 3: slime.config.v1alpha1.LogRotateConfig
	(*Prometheus_Source)(nil),         // 4: slime.config.v1alpha1.Prometheus_Source
	(*K8S_Source)(nil),                // 5: slime.config.v1alpha1.K8S_Source
	(*Metric)(nil),                    // 6: slime.config.v1alpha1.Metric
	(*General)(nil),                   // 7: slime.config.v1alpha1.General
	(*Bundle)(nil),                    // 8: slime.config.v1alpha1.Bundle
	(*Config)(nil),                    // 9: slime.config.v1alpha1.Config
	(*ConfigSource)(nil),              // 10: slime.config.v1alpha1.ConfigSource
	(*ClientGoTokenBucket)(nil),       // 11: slime.config.v1alpha1.ClientGoTokenBucket
	nil,                               // 12: slime.config.v1alpha1.Global.MiscEntry
	(*Prometheus_Source_Handler)(nil), // 13: slime.config.v1alpha1.Prometheus_Source.Handler
	nil,                               // 14: slime.config.v1alpha1.Prometheus_Source.HandlersEntry
	(*Bundle_Item)(nil),               // 15: slime.config.v1alpha1.Bundle.Item
}
var file_config_proto_depIdxs = []int32{
	2,  // 0: slime.config.v1alpha1.Global.log:type_name -> slime.config.v1alpha1.Log
	12, // 1: slime.config.v1alpha1.Global.misc:type_name -> slime.config.v1alpha1.Global.MiscEntry
	10, // 2: slime.config.v1alpha1.Global.configSources:type_name -> slime.config.v1alpha1.ConfigSource
	11, // 3: slime.config.v1alpha1.Global.clientGoTokenBucket:type_name -> slime.config.v1alpha1.ClientGoTokenBucket
	10, // 4: slime.config.v1alpha1.Global.istioConfigSource:type_name -> slime.config.v1alpha1.ConfigSource
	3,  // 5: slime.config.v1alpha1.Log.logRotateConfig:type_name -> slime.config.v1alpha1.LogRotateConfig
	14, // 6: slime.config.v1alpha1.Prometheus_Source.handlers:type_name -> slime.config.v1alpha1.Prometheus_Source.HandlersEntry
	4,  // 7: slime.config.v1alpha1.Metric.prometheus:type_name -> slime.config.v1alpha1.Prometheus_Source
	5,  // 8: slime.config.v1alpha1.Metric.k8s:type_name -> slime.config.v1alpha1.K8S_Source
	15, // 9: slime.config.v1alpha1.Bundle.modules:type_name -> slime.config.v1alpha1.Bundle.Item
	1,  // 10: slime.config.v1alpha1.Config.global:type_name -> slime.config.v1alpha1.Global
	6,  // 11: slime.config.v1alpha1.Config.metric:type_name -> slime.config.v1alpha1.Metric
	7,  // 12: slime.config.v1alpha1.Config.general:type_name -> slime.config.v1alpha1.General
	8,  // 13: slime.config.v1alpha1.Config.bundle:type_name -> slime.config.v1alpha1.Bundle
	0,  // 14: slime.config.v1alpha1.Prometheus_Source.Handler.type:type_name -> slime.config.v1alpha1.Prometheus_Source.Type
	13, // 15: slime.config.v1alpha1.Prometheus_Source.HandlersEntry.value:type_name -> slime.config.v1alpha1.Prometheus_Source.Handler
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRotateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prometheus_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8S_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*General); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientGoTokenBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prometheus_Source_Handler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
