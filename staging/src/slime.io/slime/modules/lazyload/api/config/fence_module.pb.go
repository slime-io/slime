//
// @Author: wangchenyu
// @Date: 2022/2/23

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: fence_module.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// +kubebuilder:pruning:PreserveUnknownFields
type Fence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service ports enable lazyload
	WormholePort []string `protobuf:"bytes,1,rep,name=wormholePort,proto3" json:"wormholePort,omitempty"`
	// whether enable ServiceFence auto generating
	// default value is false
	AutoFence bool `protobuf:"varint,2,opt,name=autoFence,proto3" json:"autoFence,omitempty"`
	// the namespace list which enable lazyload
	Namespace []string `protobuf:"bytes,3,rep,name=namespace,proto3" json:"namespace,omitempty"`
	// custom outside dispatch traffic rules
	Dispatches []*Dispatch `protobuf:"bytes,4,rep,name=dispatches,proto3" json:"dispatches,omitempty"`
	// can convert to one or many domain alias rules
	DomainAliases []*DomainAlias `protobuf:"bytes,5,rep,name=domainAliases,proto3" json:"domainAliases,omitempty"`
	// default behavior of create fence or not when autoFence is true
	// default value is false
	DefaultFence bool `protobuf:"varint,6,opt,name=defaultFence,proto3" json:"defaultFence,omitempty"`
	// whether enable http service port auto management
	// default value is false
	AutoPort bool `protobuf:"varint,7,opt,name=autoPort,proto3" json:"autoPort,omitempty"`
	// specify the ns of global-siecar, same as slimeNamespace by default
	ClusterGsNamespace string `protobuf:"bytes,8,opt,name=clusterGsNamespace,proto3" json:"clusterGsNamespace,omitempty"`
	// specify label key and alias to generate sf
	FenceLabelKeyAlias string `protobuf:"bytes,9,opt,name=fenceLabelKeyAlias,proto3" json:"fenceLabelKeyAlias,omitempty"`
	// enableShortDomain, it will generate fqdn and short domain if enabled, otherwise only fqdn is generated in svf and sidecar
	EnableShortDomain bool `protobuf:"varint,10,opt,name=enableShortDomain,proto3" json:"enableShortDomain,omitempty"`
	// deprecated
	// disable ipv4 passthrough
	// mainly deal with compatibility issues with older versions of istio
	// if set true, all ipv4 request will route to global-sidecar
	// default is false, all ipv4 request will route to global-sidecar
	DisableIpv4Passthrough bool `protobuf:"varint,11,opt,name=disableIpv4Passthrough,proto3" json:"disableIpv4Passthrough,omitempty"`
	// passthroughByDefault, if set true, all request will route to PassthroughCluster
	PassthroughByDefault bool `protobuf:"varint,12,opt,name=passthroughByDefault,proto3" json:"passthroughByDefault,omitempty"`
	// grpc and http2 will be supported
	SupportH2 bool `protobuf:"varint,13,opt,name=supportH2,proto3" json:"supportH2,omitempty"`
	// addEnvHeaderViaLua, if set true
	// add header Slime-Orig-Dest Slime-Source-Ns via lua
	AddEnvHeaderViaLua bool `protobuf:"varint,14,opt,name=addEnvHeaderViaLua,proto3" json:"addEnvHeaderViaLua,omitempty"`
	// global sidecar mode, cluster or namespace
	GlobalSidecarMode string `protobuf:"bytes,15,opt,name=globalSidecarMode,proto3" json:"globalSidecarMode,omitempty"`
	// if value is "lazyload", render chart by itself
	Render string `protobuf:"bytes,16,opt,name=render,proto3" json:"render,omitempty"`
	// metric source type, prometheus or accesslog
	MetricSourceType string `protobuf:"bytes,17,opt,name=metricSourceType,proto3" json:"metricSourceType,omitempty"`
	// it will clean up wormholeport if the port is deleted when value is true
	CleanupWormholePort bool `protobuf:"varint,18,opt,name=cleanupWormholePort,proto3" json:"cleanupWormholePort,omitempty"`
	// A list of Kubernetes selectors that specify the set of namespaces that Istio considers when
	// injecting sidecar or refreshing certificates. This can be used to reduce interference between
	// different control planes within the same cluster. If omitted, Istio will use the default
	// behavior of processing all namespaces in the cluster.
	// Elements in the list are disjunctive (OR semantics), i.e. a namespace will be included if it matches any selector.
	// The following example selects any namespace that matches either below:
	// 1. The namespace has both of these labels: `env: prod` and `region: us-east1`
	// 2. The namespace has label `app` equal to `cassandra` or `spark`.
	// ```yaml
	// managementSelectors:
	//   - matchLabels:
	//     env: prod
	//     region: us-east1
	//   - matchExpressions:
	//   - key: app
	//     operator: In
	//     values:
	//   - cassandra
	//   - spark
	//
	// ```
	// Refer to the [kubernetes selector docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors)
	// for additional detail on selector semantics.
	// when autoFence is true, managementSelectors will take effect
	ManagementSelectors []*v1.LabelSelector `protobuf:"bytes,19,rep,name=managementSelectors,proto3" json:"managementSelectors,omitempty"`
	// A list of namespaces that should be excluded or include
	//
	//	when autoFence is true, namespaceList will take effect
	//
	// Types that are assignable to NamespaceList:
	//
	//	*Fence_BlackNamespaceList
	//	*Fence_WhiteNamespaceList
	NamespaceList isFence_NamespaceList `protobuf_oneof:"namespaceList"`
	// A regular expression in golang regex format (RE2) that can be used to select proxies using a specific version of istio proxy to apply the to_global_sidecar envoyfilter.
	// refer to https://istio.io/latest/docs/reference/config/networking/envoy-filter/#EnvoyFilter-ProxyMatch
	ProxyVersion string `protobuf:"bytes,22,opt,name=proxyVersion,proto3" json:"proxyVersion,omitempty"`
}

func (x *Fence) Reset() {
	*x = Fence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fence_module_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fence) ProtoMessage() {}

func (x *Fence) ProtoReflect() protoreflect.Message {
	mi := &file_fence_module_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fence.ProtoReflect.Descriptor instead.
func (*Fence) Descriptor() ([]byte, []int) {
	return file_fence_module_proto_rawDescGZIP(), []int{0}
}

func (x *Fence) GetWormholePort() []string {
	if x != nil {
		return x.WormholePort
	}
	return nil
}

func (x *Fence) GetAutoFence() bool {
	if x != nil {
		return x.AutoFence
	}
	return false
}

func (x *Fence) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Fence) GetDispatches() []*Dispatch {
	if x != nil {
		return x.Dispatches
	}
	return nil
}

func (x *Fence) GetDomainAliases() []*DomainAlias {
	if x != nil {
		return x.DomainAliases
	}
	return nil
}

func (x *Fence) GetDefaultFence() bool {
	if x != nil {
		return x.DefaultFence
	}
	return false
}

func (x *Fence) GetAutoPort() bool {
	if x != nil {
		return x.AutoPort
	}
	return false
}

func (x *Fence) GetClusterGsNamespace() string {
	if x != nil {
		return x.ClusterGsNamespace
	}
	return ""
}

func (x *Fence) GetFenceLabelKeyAlias() string {
	if x != nil {
		return x.FenceLabelKeyAlias
	}
	return ""
}

func (x *Fence) GetEnableShortDomain() bool {
	if x != nil {
		return x.EnableShortDomain
	}
	return false
}

func (x *Fence) GetDisableIpv4Passthrough() bool {
	if x != nil {
		return x.DisableIpv4Passthrough
	}
	return false
}

func (x *Fence) GetPassthroughByDefault() bool {
	if x != nil {
		return x.PassthroughByDefault
	}
	return false
}

func (x *Fence) GetSupportH2() bool {
	if x != nil {
		return x.SupportH2
	}
	return false
}

func (x *Fence) GetAddEnvHeaderViaLua() bool {
	if x != nil {
		return x.AddEnvHeaderViaLua
	}
	return false
}

func (x *Fence) GetGlobalSidecarMode() string {
	if x != nil {
		return x.GlobalSidecarMode
	}
	return ""
}

func (x *Fence) GetRender() string {
	if x != nil {
		return x.Render
	}
	return ""
}

func (x *Fence) GetMetricSourceType() string {
	if x != nil {
		return x.MetricSourceType
	}
	return ""
}

func (x *Fence) GetCleanupWormholePort() bool {
	if x != nil {
		return x.CleanupWormholePort
	}
	return false
}

func (x *Fence) GetManagementSelectors() []*v1.LabelSelector {
	if x != nil {
		return x.ManagementSelectors
	}
	return nil
}

func (m *Fence) GetNamespaceList() isFence_NamespaceList {
	if m != nil {
		return m.NamespaceList
	}
	return nil
}

func (x *Fence) GetBlackNamespaceList() string {
	if x, ok := x.GetNamespaceList().(*Fence_BlackNamespaceList); ok {
		return x.BlackNamespaceList
	}
	return ""
}

func (x *Fence) GetWhiteNamespaceList() string {
	if x, ok := x.GetNamespaceList().(*Fence_WhiteNamespaceList); ok {
		return x.WhiteNamespaceList
	}
	return ""
}

func (x *Fence) GetProxyVersion() string {
	if x != nil {
		return x.ProxyVersion
	}
	return ""
}

type isFence_NamespaceList interface {
	isFence_NamespaceList()
}

type Fence_BlackNamespaceList struct {
	BlackNamespaceList string `protobuf:"bytes,20,opt,name=blackNamespaceList,proto3,oneof"`
}

type Fence_WhiteNamespaceList struct {
	WhiteNamespaceList string `protobuf:"bytes,21,opt,name=whiteNamespaceList,proto3,oneof"`
}

func (*Fence_BlackNamespaceList) isFence_NamespaceList() {}

func (*Fence_WhiteNamespaceList) isFence_NamespaceList() {}

// The general idea is to assign different default traffic to different targets
// for correct processing by means of domain matching.
type Dispatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dispatch rule name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// domain matching contents
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
	// target cluster
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// google re2 regex expression
	// forward matching request to the cluster
	DomainRegex string `protobuf:"bytes,4,opt,name=domainRegex,proto3" json:"domainRegex,omitempty"`
}

func (x *Dispatch) Reset() {
	*x = Dispatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fence_module_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispatch) ProtoMessage() {}

func (x *Dispatch) ProtoReflect() protoreflect.Message {
	mi := &file_fence_module_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dispatch.ProtoReflect.Descriptor instead.
func (*Dispatch) Descriptor() ([]byte, []int) {
	return file_fence_module_proto_rawDescGZIP(), []int{1}
}

func (x *Dispatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dispatch) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Dispatch) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Dispatch) GetDomainRegex() string {
	if x != nil {
		return x.DomainRegex
	}
	return ""
}

// DomainAlias regexp expression, which is alias for target domain
// default value is empty
// example:
// domainAliases:
//   - pattern: (?P<service>[^\.]+)\.(?P<namespace>[^\.]+)\.svc\.cluster\.local$
//     template:
//   - $namespace.$service.service.mailsaas
type DomainAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern   string   `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Templates []string `protobuf:"bytes,2,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *DomainAlias) Reset() {
	*x = DomainAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fence_module_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainAlias) ProtoMessage() {}

func (x *DomainAlias) ProtoReflect() protoreflect.Message {
	mi := &file_fence_module_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainAlias.ProtoReflect.Descriptor instead.
func (*DomainAlias) Descriptor() ([]byte, []int) {
	return file_fence_module_proto_rawDescGZIP(), []int{2}
}

func (x *DomainAlias) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *DomainAlias) GetTemplates() []string {
	if x != nil {
		return x.Templates
	}
	return nil
}

var File_fence_module_proto protoreflect.FileDescriptor

var file_fence_module_proto_rawDesc = []byte{
	0x0a, 0x12, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8,
	0x08, 0x0a, 0x05, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6d,
	0x68, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6d, 0x68, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0d,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x34, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x34, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x48, 0x32, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x45, 0x6e, 0x76, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x69, 0x61, 0x4c, 0x75, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x61, 0x64, 0x64, 0x45, 0x6e, 0x76, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x61, 0x4c, 0x75, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x57, 0x6f, 0x72, 0x6d, 0x68, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x57, 0x6f, 0x72,
	0x6d, 0x68, 0x6f, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x30, 0x0a, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22,
	0x45, 0x0a, 0x0b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e,
	0x69, 0x6f, 0x2f, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fence_module_proto_rawDescOnce sync.Once
	file_fence_module_proto_rawDescData = file_fence_module_proto_rawDesc
)

func file_fence_module_proto_rawDescGZIP() []byte {
	file_fence_module_proto_rawDescOnce.Do(func() {
		file_fence_module_proto_rawDescData = protoimpl.X.CompressGZIP(file_fence_module_proto_rawDescData)
	})
	return file_fence_module_proto_rawDescData
}

var file_fence_module_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fence_module_proto_goTypes = []interface{}{
	(*Fence)(nil),            // 0: slime.microservice.lazyload.config.Fence
	(*Dispatch)(nil),         // 1: slime.microservice.lazyload.config.Dispatch
	(*DomainAlias)(nil),      // 2: slime.microservice.lazyload.config.DomainAlias
	(*v1.LabelSelector)(nil), // 3: k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
}
var file_fence_module_proto_depIdxs = []int32{
	1, // 0: slime.microservice.lazyload.config.Fence.dispatches:type_name -> slime.microservice.lazyload.config.Dispatch
	2, // 1: slime.microservice.lazyload.config.Fence.domainAliases:type_name -> slime.microservice.lazyload.config.DomainAlias
	3, // 2: slime.microservice.lazyload.config.Fence.managementSelectors:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_fence_module_proto_init() }
func file_fence_module_proto_init() {
	if File_fence_module_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fence_module_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fence_module_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fence_module_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fence_module_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Fence_BlackNamespaceList)(nil),
		(*Fence_WhiteNamespaceList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fence_module_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fence_module_proto_goTypes,
		DependencyIndexes: file_fence_module_proto_depIdxs,
		MessageInfos:      file_fence_module_proto_msgTypes,
	}.Build()
	File_fence_module_proto = out.File
	file_fence_module_proto_rawDesc = nil
	file_fence_module_proto_goTypes = nil
	file_fence_module_proto_depIdxs = nil
}
