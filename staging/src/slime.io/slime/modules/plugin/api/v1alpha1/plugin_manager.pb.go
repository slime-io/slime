// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugin_manager.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Plugin_ListenerType int32

const (
	Plugin_Outbound Plugin_ListenerType = 0
	Plugin_Inbound  Plugin_ListenerType = 1
	Plugin_Gateway  Plugin_ListenerType = 2
)

var Plugin_ListenerType_name = map[int32]string{
	0: "Outbound",
	1: "Inbound",
	2: "Gateway",
}

var Plugin_ListenerType_value = map[string]int32{
	"Outbound": 0,
	"Inbound":  1,
	"Gateway":  2,
}

func (x Plugin_ListenerType) String() string {
	return proto.EnumName(Plugin_ListenerType_name, int32(x))
}

func (Plugin_ListenerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58d89e785e3ecf0c, []int{1, 0}
}

type PluginManagerSpec struct {
	// Zero or more labels that indicate a specific set of pods/VMs whose
	// proxies should be configured to use these additional filters.  The
	// scope of label search is platform dependent. On Kubernetes, for
	// example, the scope includes pods running in all reachable
	// namespaces. Omitting the selector applies the filter to all proxies in
	// the mesh.
	WorkloadLabels map[string]string `protobuf:"bytes,1,rep,name=workload_labels,json=workloadLabels,proto3" json:"workload_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Plugin         []*Plugin         `protobuf:"bytes,2,rep,name=plugin,proto3" json:"plugin,omitempty"`
	// Names of gateways where the rule should be applied to. Gateway names
	// at the top of the VirtualService (if any) are overridden. The gateway
	// match is independent of sourceLabels.
	Gateways []string `protobuf:"bytes,3,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// priority defines the order in which patch sets are applied within a context.
	Priority             int32    `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginManagerSpec) Reset()         { *m = PluginManagerSpec{} }
func (m *PluginManagerSpec) String() string { return proto.CompactTextString(m) }
func (*PluginManagerSpec) ProtoMessage()    {}
func (*PluginManagerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_58d89e785e3ecf0c, []int{0}
}
func (m *PluginManagerSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginManagerSpec.Unmarshal(m, b)
}
func (m *PluginManagerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginManagerSpec.Marshal(b, m, deterministic)
}
func (m *PluginManagerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginManagerSpec.Merge(m, src)
}
func (m *PluginManagerSpec) XXX_Size() int {
	return xxx_messageInfo_PluginManagerSpec.Size(m)
}
func (m *PluginManagerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginManagerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PluginManagerSpec proto.InternalMessageInfo

func (m *PluginManagerSpec) GetWorkloadLabels() map[string]string {
	if m != nil {
		return m.WorkloadLabels
	}
	return nil
}

func (m *PluginManagerSpec) GetPlugin() []*Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

func (m *PluginManagerSpec) GetGateways() []string {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *PluginManagerSpec) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type Plugin struct {
	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated
	Settings     *types.Struct       `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	ListenerType Plugin_ListenerType `protobuf:"varint,4,opt,name=listenerType,proto3,enum=slime.microservice.plugin.v1alpha1.Plugin_ListenerType" json:"listenerType,omitempty"`
	TypeUrl      string              `protobuf:"bytes,5,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	// Types that are valid to be assigned to PluginSettings:
	//	*Plugin_Wasm
	//	*Plugin_Inline
	//	*Plugin_Rider
	PluginSettings isPlugin_PluginSettings `protobuf_oneof:"plugin_settings"`
	Port           uint32                  `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	// rawPatch will patch to the generated final envoy filter config patch (EnvoyFilter_EnvoyConfigObjectPatch)
	RawPatch             *types.Struct `protobuf:"bytes,10,opt,name=rawPatch,proto3" json:"rawPatch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Plugin) Reset()         { *m = Plugin{} }
func (m *Plugin) String() string { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()    {}
func (*Plugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_58d89e785e3ecf0c, []int{1}
}
func (m *Plugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plugin.Unmarshal(m, b)
}
func (m *Plugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plugin.Marshal(b, m, deterministic)
}
func (m *Plugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugin.Merge(m, src)
}
func (m *Plugin) XXX_Size() int {
	return xxx_messageInfo_Plugin.Size(m)
}
func (m *Plugin) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugin.DiscardUnknown(m)
}

var xxx_messageInfo_Plugin proto.InternalMessageInfo

type isPlugin_PluginSettings interface {
	isPlugin_PluginSettings()
}

type Plugin_Wasm struct {
	Wasm *Wasm `protobuf:"bytes,6,opt,name=wasm,proto3,oneof" json:"wasm,omitempty"`
}
type Plugin_Inline struct {
	Inline *Inline `protobuf:"bytes,7,opt,name=inline,proto3,oneof" json:"inline,omitempty"`
}
type Plugin_Rider struct {
	Rider *Rider `protobuf:"bytes,9,opt,name=rider,proto3,oneof" json:"rider,omitempty"`
}

func (*Plugin_Wasm) isPlugin_PluginSettings()   {}
func (*Plugin_Inline) isPlugin_PluginSettings() {}
func (*Plugin_Rider) isPlugin_PluginSettings()  {}

func (m *Plugin) GetPluginSettings() isPlugin_PluginSettings {
	if m != nil {
		return m.PluginSettings
	}
	return nil
}

func (m *Plugin) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Plugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plugin) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Plugin) GetListenerType() Plugin_ListenerType {
	if m != nil {
		return m.ListenerType
	}
	return Plugin_Outbound
}

func (m *Plugin) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *Plugin) GetWasm() *Wasm {
	if x, ok := m.GetPluginSettings().(*Plugin_Wasm); ok {
		return x.Wasm
	}
	return nil
}

func (m *Plugin) GetInline() *Inline {
	if x, ok := m.GetPluginSettings().(*Plugin_Inline); ok {
		return x.Inline
	}
	return nil
}

func (m *Plugin) GetRider() *Rider {
	if x, ok := m.GetPluginSettings().(*Plugin_Rider); ok {
		return x.Rider
	}
	return nil
}

func (m *Plugin) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Plugin) GetRawPatch() *types.Struct {
	if m != nil {
		return m.RawPatch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Plugin) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Plugin_Wasm)(nil),
		(*Plugin_Inline)(nil),
		(*Plugin_Rider)(nil),
	}
}

type Wasm struct {
	Settings   *types.Struct `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	PluginName string        `protobuf:"bytes,2,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty"`
	Url        string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Sha256     string        `protobuf:"bytes,4,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// Types that are valid to be assigned to ImagePullSecret:
	//	*Wasm_ImagePullSecretName
	//	*Wasm_ImagePullSecretContent
	ImagePullSecret      isWasm_ImagePullSecret `protobuf_oneof:"image_pull_secret"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Wasm) Reset()         { *m = Wasm{} }
func (m *Wasm) String() string { return proto.CompactTextString(m) }
func (*Wasm) ProtoMessage()    {}
func (*Wasm) Descriptor() ([]byte, []int) {
	return fileDescriptor_58d89e785e3ecf0c, []int{2}
}
func (m *Wasm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Wasm.Unmarshal(m, b)
}
func (m *Wasm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Wasm.Marshal(b, m, deterministic)
}
func (m *Wasm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wasm.Merge(m, src)
}
func (m *Wasm) XXX_Size() int {
	return xxx_messageInfo_Wasm.Size(m)
}
func (m *Wasm) XXX_DiscardUnknown() {
	xxx_messageInfo_Wasm.DiscardUnknown(m)
}

var xxx_messageInfo_Wasm proto.InternalMessageInfo

type isWasm_ImagePullSecret interface {
	isWasm_ImagePullSecret()
}

type Wasm_ImagePullSecretName struct {
	ImagePullSecretName string `protobuf:"bytes,5,opt,name=image_pull_secret_name,json=imagePullSecretName,proto3,oneof" json:"image_pull_secret_name,omitempty"`
}
type Wasm_ImagePullSecretContent struct {
	ImagePullSecretContent string `protobuf:"bytes,6,opt,name=image_pull_secret_content,json=imagePullSecretContent,proto3,oneof" json:"image_pull_secret_content,omitempty"`
}

func (*Wasm_ImagePullSecretName) isWasm_ImagePullSecret()    {}
func (*Wasm_ImagePullSecretContent) isWasm_ImagePullSecret() {}

func (m *Wasm) GetImagePullSecret() isWasm_ImagePullSecret {
	if m != nil {
		return m.ImagePullSecret
	}
	return nil
}

func (m *Wasm) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Wasm) GetPluginName() string {
	if m != nil {
		return m.PluginName
	}
	return ""
}

func (m *Wasm) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Wasm) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

func (m *Wasm) GetImagePullSecretName() string {
	if x, ok := m.GetImagePullSecret().(*Wasm_ImagePullSecretName); ok {
		return x.ImagePullSecretName
	}
	return ""
}

func (m *Wasm) GetImagePullSecretContent() string {
	if x, ok := m.GetImagePullSecret().(*Wasm_ImagePullSecretContent); ok {
		return x.ImagePullSecretContent
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Wasm) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Wasm_ImagePullSecretName)(nil),
		(*Wasm_ImagePullSecretContent)(nil),
	}
}

type Rider struct {
	Settings   *types.Struct `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	PluginName string        `protobuf:"bytes,2,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty"`
	Url        string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Sha256     string        `protobuf:"bytes,4,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// Types that are valid to be assigned to ImagePullSecret:
	//	*Rider_ImagePullSecretName
	//	*Rider_ImagePullSecretContent
	ImagePullSecret      isRider_ImagePullSecret `protobuf_oneof:"image_pull_secret"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Rider) Reset()         { *m = Rider{} }
func (m *Rider) String() string { return proto.CompactTextString(m) }
func (*Rider) ProtoMessage()    {}
func (*Rider) Descriptor() ([]byte, []int) {
	return fileDescriptor_58d89e785e3ecf0c, []int{3}
}
func (m *Rider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rider.Unmarshal(m, b)
}
func (m *Rider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rider.Marshal(b, m, deterministic)
}
func (m *Rider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rider.Merge(m, src)
}
func (m *Rider) XXX_Size() int {
	return xxx_messageInfo_Rider.Size(m)
}
func (m *Rider) XXX_DiscardUnknown() {
	xxx_messageInfo_Rider.DiscardUnknown(m)
}

var xxx_messageInfo_Rider proto.InternalMessageInfo

type isRider_ImagePullSecret interface {
	isRider_ImagePullSecret()
}

type Rider_ImagePullSecretName struct {
	ImagePullSecretName string `protobuf:"bytes,5,opt,name=image_pull_secret_name,json=imagePullSecretName,proto3,oneof" json:"image_pull_secret_name,omitempty"`
}
type Rider_ImagePullSecretContent struct {
	ImagePullSecretContent string `protobuf:"bytes,6,opt,name=image_pull_secret_content,json=imagePullSecretContent,proto3,oneof" json:"image_pull_secret_content,omitempty"`
}

func (*Rider_ImagePullSecretName) isRider_ImagePullSecret()    {}
func (*Rider_ImagePullSecretContent) isRider_ImagePullSecret() {}

func (m *Rider) GetImagePullSecret() isRider_ImagePullSecret {
	if m != nil {
		return m.ImagePullSecret
	}
	return nil
}

func (m *Rider) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Rider) GetPluginName() string {
	if m != nil {
		return m.PluginName
	}
	return ""
}

func (m *Rider) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Rider) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

func (m *Rider) GetImagePullSecretName() string {
	if x, ok := m.GetImagePullSecret().(*Rider_ImagePullSecretName); ok {
		return x.ImagePullSecretName
	}
	return ""
}

func (m *Rider) GetImagePullSecretContent() string {
	if x, ok := m.GetImagePullSecret().(*Rider_ImagePullSecretContent); ok {
		return x.ImagePullSecretContent
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Rider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Rider_ImagePullSecretName)(nil),
		(*Rider_ImagePullSecretContent)(nil),
	}
}

type Inline struct {
	Settings             *types.Struct `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	DirectPatch          bool          `protobuf:"varint,2,opt,name=directPatch,proto3" json:"directPatch,omitempty"`
	FieldPatchTo         string        `protobuf:"bytes,3,opt,name=fieldPatchTo,proto3" json:"fieldPatchTo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Inline) Reset()         { *m = Inline{} }
func (m *Inline) String() string { return proto.CompactTextString(m) }
func (*Inline) ProtoMessage()    {}
func (*Inline) Descriptor() ([]byte, []int) {
	return fileDescriptor_58d89e785e3ecf0c, []int{4}
}
func (m *Inline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Inline.Unmarshal(m, b)
}
func (m *Inline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Inline.Marshal(b, m, deterministic)
}
func (m *Inline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inline.Merge(m, src)
}
func (m *Inline) XXX_Size() int {
	return xxx_messageInfo_Inline.Size(m)
}
func (m *Inline) XXX_DiscardUnknown() {
	xxx_messageInfo_Inline.DiscardUnknown(m)
}

var xxx_messageInfo_Inline proto.InternalMessageInfo

func (m *Inline) GetSettings() *types.Struct {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Inline) GetDirectPatch() bool {
	if m != nil {
		return m.DirectPatch
	}
	return false
}

func (m *Inline) GetFieldPatchTo() string {
	if m != nil {
		return m.FieldPatchTo
	}
	return ""
}

func init() {
	proto.RegisterEnum("slime.microservice.plugin.v1alpha1.Plugin_ListenerType", Plugin_ListenerType_name, Plugin_ListenerType_value)
	proto.RegisterType((*PluginManagerSpec)(nil), "slime.microservice.plugin.v1alpha1.PluginManagerSpec")
	proto.RegisterMapType((map[string]string)(nil), "slime.microservice.plugin.v1alpha1.PluginManagerSpec.WorkloadLabelsEntry")
	proto.RegisterType((*Plugin)(nil), "slime.microservice.plugin.v1alpha1.Plugin")
	proto.RegisterType((*Wasm)(nil), "slime.microservice.plugin.v1alpha1.Wasm")
	proto.RegisterType((*Rider)(nil), "slime.microservice.plugin.v1alpha1.Rider")
	proto.RegisterType((*Inline)(nil), "slime.microservice.plugin.v1alpha1.Inline")
}

func init() { proto.RegisterFile("plugin_manager.proto", fileDescriptor_58d89e785e3ecf0c) }

var fileDescriptor_58d89e785e3ecf0c = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0x4d, 0x6b, 0xdb, 0x4a,
	0x14, 0xb5, 0xe4, 0x8f, 0xd8, 0xd7, 0x7e, 0x89, 0x33, 0x09, 0x79, 0x4a, 0x78, 0xf0, 0x8c, 0x56,
	0x7a, 0xe1, 0x21, 0x11, 0x87, 0xa4, 0xa5, 0x85, 0x42, 0xdc, 0x96, 0x3a, 0x90, 0xb6, 0x61, 0x92,
	0x12, 0x68, 0x17, 0x66, 0x2c, 0x4f, 0x94, 0x21, 0x23, 0x8d, 0x18, 0x8d, 0x62, 0xbc, 0xee, 0x0f,
	0x68, 0x7f, 0x51, 0x97, 0xfd, 0x5d, 0x45, 0x33, 0x72, 0xb0, 0x9b, 0x42, 0x4c, 0xd7, 0xdd, 0xcd,
	0xb9, 0xa3, 0x73, 0xee, 0xf5, 0x3d, 0x67, 0x0c, 0xdb, 0x29, 0xcf, 0x23, 0x96, 0x8c, 0x62, 0x92,
	0x90, 0x88, 0x4a, 0x3f, 0x95, 0x42, 0x09, 0xe4, 0x66, 0x9c, 0xc5, 0xd4, 0x8f, 0x59, 0x28, 0x45,
	0x46, 0xe5, 0x1d, 0x0b, 0xa9, 0x6f, 0x3e, 0xf4, 0xef, 0x0e, 0x08, 0x4f, 0x6f, 0xc8, 0xc1, 0xde,
	0x3f, 0x91, 0x10, 0x11, 0xa7, 0x81, 0x66, 0x8c, 0xf3, 0xeb, 0x20, 0x53, 0x32, 0x0f, 0x95, 0x51,
	0x70, 0xbf, 0xdb, 0xb0, 0x79, 0xae, 0x19, 0x6f, 0x8d, 0xf2, 0x45, 0x4a, 0x43, 0x24, 0x61, 0x63,
	0x2a, 0xe4, 0x2d, 0x17, 0x64, 0x32, 0xe2, 0x64, 0x4c, 0x79, 0xe6, 0x58, 0xbd, 0xaa, 0xd7, 0xee,
	0x9f, 0xfa, 0x8f, 0x77, 0xf4, 0x1f, 0xe8, 0xf9, 0x57, 0xa5, 0xd8, 0x99, 0xd6, 0x7a, 0x9d, 0x28,
	0x39, 0xc3, 0xeb, 0xd3, 0xa5, 0x22, 0x1a, 0x40, 0xc3, 0x08, 0x39, 0xb6, 0x6e, 0xb5, 0xbf, 0x7a,
	0x2b, 0x5c, 0x32, 0xd1, 0x1e, 0x34, 0x23, 0xa2, 0xe8, 0x94, 0xcc, 0x32, 0xa7, 0xda, 0xab, 0x7a,
	0x2d, 0x7c, 0x8f, 0x8b, 0xbb, 0x54, 0x32, 0x21, 0x99, 0x9a, 0x39, 0xb5, 0x9e, 0xe5, 0xd5, 0xf1,
	0x3d, 0xde, 0x3b, 0x81, 0xad, 0x5f, 0x8c, 0x88, 0xba, 0x50, 0xbd, 0xa5, 0x33, 0xc7, 0xea, 0x59,
	0x5e, 0x0b, 0x17, 0x47, 0xb4, 0x0d, 0xf5, 0x3b, 0xc2, 0x73, 0xea, 0xd8, 0xba, 0x66, 0xc0, 0x33,
	0xfb, 0xa9, 0xe5, 0x7e, 0xab, 0x41, 0xc3, 0x4c, 0x83, 0x76, 0xa0, 0x41, 0x13, 0x32, 0xe6, 0x54,
	0x33, 0x9b, 0xb8, 0x44, 0x08, 0x41, 0x2d, 0x21, 0xf1, 0x9c, 0xab, 0xcf, 0xe8, 0x10, 0x9a, 0x19,
	0x55, 0x8a, 0x25, 0x51, 0x31, 0xb1, 0xe5, 0xb5, 0xfb, 0x7f, 0xfb, 0xc6, 0x30, 0x7f, 0x6e, 0x98,
	0x7f, 0xa1, 0x0d, 0xc3, 0xf7, 0x1f, 0xa2, 0x4f, 0xd0, 0xe1, 0x2c, 0x53, 0x34, 0xa1, 0xf2, 0x72,
	0x96, 0x52, 0xfd, 0x73, 0xd6, 0xfb, 0x4f, 0x56, 0x5f, 0x98, 0x7f, 0xb6, 0x40, 0xc7, 0x4b, 0x62,
	0x68, 0x17, 0x9a, 0x6a, 0x96, 0xd2, 0x51, 0x2e, 0xb9, 0x53, 0xd7, 0x93, 0xae, 0x15, 0xf8, 0x83,
	0xe4, 0xe8, 0x05, 0xd4, 0xa6, 0x24, 0x8b, 0x9d, 0x86, 0x1e, 0xd4, 0x5b, 0xa5, 0xdf, 0x15, 0xc9,
	0xe2, 0x61, 0x05, 0x6b, 0x1e, 0x7a, 0x05, 0x0d, 0x96, 0x70, 0x96, 0x50, 0x67, 0x4d, 0x2b, 0xac,
	0x64, 0xf1, 0xa9, 0x66, 0x0c, 0x2b, 0xb8, 0xe4, 0xa2, 0x13, 0xa8, 0x4b, 0x36, 0xa1, 0xd2, 0x69,
	0x69, 0x91, 0xff, 0x56, 0x11, 0xc1, 0x05, 0x61, 0x58, 0xc1, 0x86, 0x59, 0x38, 0x91, 0x0a, 0xa9,
	0x9c, 0x66, 0xcf, 0xf2, 0xfe, 0xc2, 0xfa, 0x5c, 0x38, 0x21, 0xc9, 0xf4, 0x9c, 0xa8, 0xf0, 0xc6,
	0x81, 0x47, 0x9c, 0x98, 0x7f, 0xe8, 0x1e, 0x43, 0x67, 0x71, 0x95, 0xa8, 0x03, 0xcd, 0xf7, 0xb9,
	0x1a, 0x8b, 0x3c, 0x99, 0x74, 0x2b, 0xa8, 0x0d, 0x6b, 0xa7, 0x89, 0x01, 0x56, 0x01, 0xde, 0x98,
	0x2c, 0x76, 0xed, 0xc1, 0x26, 0x6c, 0x94, 0x0f, 0x7a, 0x6e, 0xaa, 0xfb, 0xc5, 0x86, 0x5a, 0xb1,
	0xad, 0xa5, 0x48, 0x58, 0xab, 0x46, 0xe2, 0x5f, 0x68, 0x97, 0x82, 0x0b, 0x11, 0x03, 0x53, 0x7a,
	0x57, 0x04, 0xad, 0x0b, 0xd5, 0xc2, 0xd1, 0xaa, 0xc9, 0x72, 0x2e, 0x79, 0x11, 0xd3, 0xec, 0x86,
	0xf4, 0x8f, 0x8e, 0x75, 0x7e, 0x5a, 0xb8, 0x44, 0xe8, 0x08, 0x76, 0x58, 0x4c, 0x22, 0x3a, 0x4a,
	0x73, 0xce, 0x47, 0x19, 0x0d, 0x25, 0x55, 0x46, 0x55, 0xc7, 0x61, 0x58, 0xc1, 0x5b, 0xfa, 0xfe,
	0x3c, 0xe7, 0xfc, 0x42, 0xdf, 0xea, 0x06, 0xcf, 0x61, 0xf7, 0x21, 0x2d, 0x14, 0x89, 0xa2, 0x89,
	0xd2, 0x89, 0x29, 0x98, 0x3b, 0x3f, 0x31, 0x5f, 0x9a, 0xfb, 0xc1, 0x16, 0x6c, 0x3e, 0x20, 0xbb,
	0x5f, 0x6d, 0xa8, 0x6b, 0xe3, 0xfe, 0xac, 0x64, 0xbe, 0x92, 0xcf, 0x16, 0x34, 0xcc, 0x83, 0xf8,
	0xbd, 0x9d, 0xf4, 0xa0, 0x3d, 0x61, 0x92, 0x86, 0xca, 0xe4, 0xdc, 0xd6, 0xff, 0x4f, 0x8b, 0x25,
	0xe4, 0x42, 0xe7, 0x9a, 0x51, 0x3e, 0xd1, 0xe8, 0x52, 0x94, 0xdb, 0x59, 0xaa, 0x0d, 0xfe, 0xff,
	0xb8, 0x6f, 0xde, 0x1c, 0x13, 0x81, 0x3e, 0x04, 0xb1, 0x98, 0xe4, 0x9c, 0x66, 0x81, 0xd9, 0x6e,
	0x40, 0x52, 0x16, 0xcc, 0xdf, 0xde, 0xb8, 0xa1, 0xc7, 0x39, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0x81, 0x64, 0x0b, 0xc3, 0x06, 0x00, 0x00,
}
