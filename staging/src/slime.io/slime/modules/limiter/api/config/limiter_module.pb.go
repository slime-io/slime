//
// @Author: wangchenyu
// @Date: 2022/2/23

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: limiter_module.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Limiter_RateLimitBackend int32

const (
	Limiter_netEaseLocalFlowControl Limiter_RateLimitBackend = 0
	Limiter_envoyLocalRateLimit     Limiter_RateLimitBackend = 1
)

// Enum value maps for Limiter_RateLimitBackend.
var (
	Limiter_RateLimitBackend_name = map[int32]string{
		0: "netEaseLocalFlowControl",
		1: "envoyLocalRateLimit",
	}
	Limiter_RateLimitBackend_value = map[string]int32{
		"netEaseLocalFlowControl": 0,
		"envoyLocalRateLimit":     1,
	}
)

func (x Limiter_RateLimitBackend) Enum() *Limiter_RateLimitBackend {
	p := new(Limiter_RateLimitBackend)
	*p = x
	return p
}

func (x Limiter_RateLimitBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Limiter_RateLimitBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_limiter_module_proto_enumTypes[0].Descriptor()
}

func (Limiter_RateLimitBackend) Type() protoreflect.EnumType {
	return &file_limiter_module_proto_enumTypes[0]
}

func (x Limiter_RateLimitBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Limiter_RateLimitBackend.Descriptor instead.
func (Limiter_RateLimitBackend) EnumDescriptor() ([]byte, []int) {
	return file_limiter_module_proto_rawDescGZIP(), []int{0, 0}
}

type Limiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backend Limiter_RateLimitBackend `protobuf:"varint,3,opt,name=backend,proto3,enum=slime.microservice.limiter.config.Limiter_RateLimitBackend" json:"backend,omitempty"`
	Refresh *durationpb.Duration     `protobuf:"bytes,4,opt,name=refresh,proto3" json:"refresh,omitempty"`
	// it will disable GlobalRateLimit
	DisableGlobalRateLimit bool `protobuf:"varint,5,opt,name=disableGlobalRateLimit,proto3" json:"disableGlobalRateLimit,omitempty"`
	// it will disable use promql
	DisableAdaptive    bool `protobuf:"varint,6,opt,name=disableAdaptive,proto3" json:"disableAdaptive,omitempty"`
	EnableServiceEntry bool `protobuf:"varint,7,opt,name=enableServiceEntry,proto3" json:"enableServiceEntry,omitempty"`
	// it will not generate envoy.filters.http.local_ratelimit insert before http.router when true
	DisableInsertLocalRateLimit bool `protobuf:"varint,8,opt,name=disableInsertLocalRateLimit,proto3" json:"disableInsertLocalRateLimit,omitempty"`
	// it will not generate envoy.filters.http.ratelimit insert before http.router when true
	DisableInsertGlobalRateLimit bool `protobuf:"varint,9,opt,name=disableInsertGlobalRateLimit,proto3" json:"disableInsertGlobalRateLimit,omitempty"`
	// specify the rls namespaces
	RlsConfigMap *RlsConfigMap `protobuf:"bytes,10,opt,name=rlsConfigMap,proto3" json:"rlsConfigMap,omitempty"`
	// specify domain, it is useful in global ratelimiter
	Domain string `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`
	// specify rls server address, if disableInsertGlobalRateLimit if false
	Rls *RateLimitService `protobuf:"bytes,12,opt,name=rls,proto3" json:"rls,omitempty"`
	// A regular expression in golang regex format (RE2) that can be used to select proxies using a specific version of istio proxy to apply the ratelimit envoyfilter.
	// refer to https://istio.io/latest/docs/reference/config/networking/envoy-filter/#EnvoyFilter-ProxyMatch
	ProxyVersion string `protobuf:"bytes,13,opt,name=proxyVersion,proto3" json:"proxyVersion,omitempty"`
	// enable ratelimit placeholder in route to optimize performance
	EnableRatelimitPlaceholderInRoute bool `protobuf:"varint,14,opt,name=enableRatelimitPlaceholderInRoute,proto3" json:"enableRatelimitPlaceholderInRoute,omitempty"`
}

func (x *Limiter) Reset() {
	*x = Limiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_module_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limiter) ProtoMessage() {}

func (x *Limiter) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_module_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limiter.ProtoReflect.Descriptor instead.
func (*Limiter) Descriptor() ([]byte, []int) {
	return file_limiter_module_proto_rawDescGZIP(), []int{0}
}

func (x *Limiter) GetBackend() Limiter_RateLimitBackend {
	if x != nil {
		return x.Backend
	}
	return Limiter_netEaseLocalFlowControl
}

func (x *Limiter) GetRefresh() *durationpb.Duration {
	if x != nil {
		return x.Refresh
	}
	return nil
}

func (x *Limiter) GetDisableGlobalRateLimit() bool {
	if x != nil {
		return x.DisableGlobalRateLimit
	}
	return false
}

func (x *Limiter) GetDisableAdaptive() bool {
	if x != nil {
		return x.DisableAdaptive
	}
	return false
}

func (x *Limiter) GetEnableServiceEntry() bool {
	if x != nil {
		return x.EnableServiceEntry
	}
	return false
}

func (x *Limiter) GetDisableInsertLocalRateLimit() bool {
	if x != nil {
		return x.DisableInsertLocalRateLimit
	}
	return false
}

func (x *Limiter) GetDisableInsertGlobalRateLimit() bool {
	if x != nil {
		return x.DisableInsertGlobalRateLimit
	}
	return false
}

func (x *Limiter) GetRlsConfigMap() *RlsConfigMap {
	if x != nil {
		return x.RlsConfigMap
	}
	return nil
}

func (x *Limiter) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Limiter) GetRls() *RateLimitService {
	if x != nil {
		return x.Rls
	}
	return nil
}

func (x *Limiter) GetProxyVersion() string {
	if x != nil {
		return x.ProxyVersion
	}
	return ""
}

func (x *Limiter) GetEnableRatelimitPlaceholderInRoute() bool {
	if x != nil {
		return x.EnableRatelimitPlaceholderInRoute
	}
	return false
}

// configmap will mount to RateLimitService '/data/ratelimit/config'
type RlsConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// configmap name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// configmap namespace
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *RlsConfigMap) Reset() {
	*x = RlsConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_module_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RlsConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RlsConfigMap) ProtoMessage() {}

func (x *RlsConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_module_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RlsConfigMap.ProtoReflect.Descriptor instead.
func (*RlsConfigMap) Descriptor() ([]byte, []int) {
	return file_limiter_module_proto_rawDescGZIP(), []int{1}
}

func (x *RlsConfigMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RlsConfigMap) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RateLimitService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rate-limit.gateway-system.svc.cluster.local
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// service port
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RateLimitService) Reset() {
	*x = RateLimitService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_limiter_module_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitService) ProtoMessage() {}

func (x *RateLimitService) ProtoReflect() protoreflect.Message {
	mi := &file_limiter_module_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitService.ProtoReflect.Descriptor instead.
func (*RateLimitService) Descriptor() ([]byte, []int) {
	return file_limiter_module_proto_rawDescGZIP(), []int{2}
}

func (x *RateLimitService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *RateLimitService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_limiter_module_proto protoreflect.FileDescriptor

var file_limiter_module_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x06, 0x0a, 0x07, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x72, 0x6c, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x52, 0x0c, 0x72, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x03, 0x72, 0x6c, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x72, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22,
	0x48, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x45, 0x61, 0x73, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x22, 0x40, 0x0a, 0x0c, 0x52, 0x6c, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x2b, 0x5a,
	0x29, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x6c, 0x69, 0x6d, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_limiter_module_proto_rawDescOnce sync.Once
	file_limiter_module_proto_rawDescData = file_limiter_module_proto_rawDesc
)

func file_limiter_module_proto_rawDescGZIP() []byte {
	file_limiter_module_proto_rawDescOnce.Do(func() {
		file_limiter_module_proto_rawDescData = protoimpl.X.CompressGZIP(file_limiter_module_proto_rawDescData)
	})
	return file_limiter_module_proto_rawDescData
}

var file_limiter_module_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_limiter_module_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_limiter_module_proto_goTypes = []interface{}{
	(Limiter_RateLimitBackend)(0), // 0: slime.microservice.limiter.config.Limiter.RateLimitBackend
	(*Limiter)(nil),               // 1: slime.microservice.limiter.config.Limiter
	(*RlsConfigMap)(nil),          // 2: slime.microservice.limiter.config.RlsConfigMap
	(*RateLimitService)(nil),      // 3: slime.microservice.limiter.config.RateLimitService
	(*durationpb.Duration)(nil),   // 4: google.protobuf.Duration
}
var file_limiter_module_proto_depIdxs = []int32{
	0, // 0: slime.microservice.limiter.config.Limiter.backend:type_name -> slime.microservice.limiter.config.Limiter.RateLimitBackend
	4, // 1: slime.microservice.limiter.config.Limiter.refresh:type_name -> google.protobuf.Duration
	2, // 2: slime.microservice.limiter.config.Limiter.rlsConfigMap:type_name -> slime.microservice.limiter.config.RlsConfigMap
	3, // 3: slime.microservice.limiter.config.Limiter.rls:type_name -> slime.microservice.limiter.config.RateLimitService
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_limiter_module_proto_init() }
func file_limiter_module_proto_init() {
	if File_limiter_module_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_limiter_module_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_module_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RlsConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_limiter_module_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_limiter_module_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_limiter_module_proto_goTypes,
		DependencyIndexes: file_limiter_module_proto_depIdxs,
		EnumInfos:         file_limiter_module_proto_enumTypes,
		MessageInfos:      file_limiter_module_proto_msgTypes,
	}.Build()
	File_limiter_module_proto = out.File
	file_limiter_module_proto_rawDesc = nil
	file_limiter_module_proto_goTypes = nil
	file_limiter_module_proto_depIdxs = nil
}
