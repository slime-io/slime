{{ if .Values.component }}
  {{ if .Values.component.reportServer.enable }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: report-server
  namespace: mesh-operator
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      istio: mixer
      istio-mixer-type: telemetry
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      creationTimestamp: null
      labels:
        app: istio-telemetry
        istio: mixer
        istio-mixer-type: telemetry
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
              weight: 2
            - preference:
                matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - ppc64le
              weight: 2
            - preference:
                matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - s390x
              weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - ppc64le
                      - s390x
      containers:
        - args:
            - --monitoringPort=15014
            - --address
            - tcp://0.0.0.0:9091
            - --log_output_level=default:debug
            - --configStoreURL=fs:///config
            - --configDefaultNamespace=mesh-operator
            - --useAdapterCRDs=false
            - --useTemplateCRDs=false
          env:
            - name: GOMAXPROCS
              value: "2"
          image: "{{ $.Values.component.reportServer.mixerImage.repository }}:{{ $.Values.component.reportServer.mixerImage.tag}}"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /version
              port: 15014
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          name: mixer
          ports:
            - containerPort: 15014
              protocol: TCP
            - containerPort: 42422
              protocol: TCP
          resources:
          {{- toYaml $.Values.component.reportServer.resources | nindent 12 }}      
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /sock
              name: uds-socket
            - mountPath: /var/run/secrets/istio.io/telemetry/adapter
              name: telemetry-adapter-secret
              readOnly: true
            - mountPath: /config
              name: telemetry-config
        - args:
            - --crdCrontabCycle=*/30 * * * *
            - --defaultStrategyTime=86400000
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          image: "{{ $.Values.component.reportServer.inspectorImage.repository }}:{{ $.Values.component.reportServer.inspectorImage.tag}}"
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 15
          name: app
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
          {{- toYaml $.Values.component.reportServer.resources | nindent 12 }} 
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: { }
      serviceAccount: istio-mixer-service-account
      serviceAccountName: istio-mixer-service-account
      terminationGracePeriodSeconds: 30
      volumes:
        - name: istio-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio.istio-mixer-service-account
        - emptyDir: { }
          name: uds-socket
        - name: telemetry-adapter-secret
          secret:
            defaultMode: 420
            optional: true
            secretName: telemetry-adapter-secret
        - configMap:
            defaultMode: 420
            name: telemetry-config
          name: telemetry-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-mixer-service-account
  namespace: mesh-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-mixer-slime
subjects:
  - kind: ServiceAccount
    name: istio-mixer-service-account
    namespace: mesh-operator
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: istio-telemetry
  namespace: mesh-operator
spec:
  ports:
    - name: grpc-mixer
      port: 9091
      protocol: TCP
      targetPort: 9091
    - name: grpc-mixer-mtls
      port: 15004
      protocol: TCP
      targetPort: 15004
    - name: http-monitoring
      port: 15014
      protocol: TCP
      targetPort: 15014
    - name: prometheus
      port: 42422
      protocol: TCP
      targetPort: 42422
  selector:
    istio: mixer
    istio-mixer-type: telemetry
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telemetry-config
  namespace: mesh-operator
data:
  template.yaml: |
    apiVersion: config.istio.io/v1alpha2
    kind: template
    metadata:
      name: metric
      namespace: mesh-operator
    spec:
      descriptor: 
  adapter.yaml: |
    apiversion: config.istio.io/v1alpha2
    kind: adapter
    metadata:
      name: dependencyadapter
      namespace: mesh-operator
    spec:
      config: 
      description: null
      session_based: false
      templates:
      - metric
  rule.yaml: |
    apiVersion: config.istio.io/v1alpha2
    kind: rule
    metadata:
      name: dependency-rule
      namespace: mesh-operator
    spec:
      actions:
      - handler: dependency-handler
        instances:
        - dependency-metric
  instance.yaml: |
    apiVersion: config.istio.io/v1alpha2
    kind: instance
    metadata:
      name: dependency-metric
      namespace: mesh-operator
    spec:
      params:
        dimensions:
          protocol: context.protocol
          global_sidecar_destination: request.host | "unknown"
          global_sidecar_source_ip: request.headers["x-forwarded-for"] | "unknown"
        value: request.size | 0
      template: metric

  handler.yaml: |
    apiVersion: config.istio.io/v1alpha2
    kind: handler
    metadata:
      name: dependency-handler
      namespace: mesh-operator
    spec:
      adapter: dependencyadapter
      connection:
        address: localhost:50051
      params:
        from_service: a
        to_service: b
  kubernetes.yaml: |
    apiVersion: config.istio.io/v1alpha2
    kind: attributemanifest
    metadata:
      name: kubernetes
      namespace: mesh-operator
    spec:
      attributes:
        destination.container.name:
          valueType: STRING
        destination.ip:
          valueType: IP_ADDRESS
        destination.labels:
          valueType: STRING_MAP
        destination.metadata:
          valueType: STRING_MAP
        destination.name:
          valueType: STRING
        destination.namespace:
          valueType: STRING
        destination.owner:
          valueType: STRING
        destination.service.host:
          valueType: STRING
        destination.service.name:
          valueType: STRING
        destination.service.namespace:
          valueType: STRING
        destination.service.uid:
          valueType: STRING
        destination.serviceAccount:
          valueType: STRING
        destination.workload.name:
          valueType: STRING
        destination.workload.namespace:
          valueType: STRING
        destination.workload.uid:
          valueType: STRING
        source.ip:
          valueType: IP_ADDRESS
        source.labels:
          valueType: STRING_MAP
        source.metadata:
          valueType: STRING_MAP
        source.name:
          valueType: STRING
        source.namespace:
          valueType: STRING
        source.owner:
          valueType: STRING
        source.serviceAccount:
          valueType: STRING
        source.services:
          valueType: STRING
        source.workload.name:
          valueType: STRING
        source.workload.namespace:
          valueType: STRING
        source.workload.uid:
          valueType: STRING
  istioproxy.yaml: |
    apiVersion: config.istio.io/v1alpha2
    kind: attributemanifest
    metadata:
      name: istioproxy
      namespace: mesh-operator
    spec:
      attributes:
        api.operation:
          valueType: STRING
        api.protocol:
          valueType: STRING
        api.service:
          valueType: STRING
        api.version:
          valueType: STRING
        check.cache_hit:
          valueType: BOOL
        check.error_code:
          valueType: INT64
        check.error_message:
          valueType: STRING
        connection.duration:
          valueType: DURATION
        connection.event:
          valueType: STRING
        connection.id:
          valueType: STRING
        connection.mtls:
          valueType: BOOL
        connection.received.bytes:
          valueType: INT64
        connection.received.bytes_total:
          valueType: INT64
        connection.requested_server_name:
          valueType: STRING
        connection.sent.bytes:
          valueType: INT64
        connection.sent.bytes_total:
          valueType: INT64
        context.protocol:
          valueType: STRING
        context.proxy_error_code:
          valueType: STRING
        context.proxy_version:
          valueType: STRING
        context.reporter.kind:
          valueType: STRING
        context.reporter.local:
          valueType: BOOL
        context.reporter.uid:
          valueType: STRING
        context.time:
          valueType: TIMESTAMP
        context.timestamp:
          valueType: TIMESTAMP
        destination.port:
          valueType: INT64
        destination.principal:
          valueType: STRING
        destination.uid:
          valueType: STRING
        origin.ip:
          valueType: IP_ADDRESS
        origin.uid:
          valueType: STRING
        origin.user:
          valueType: STRING
        quota.cache_hit:
          valueType: BOOL
        rbac.permissive.effective_policy_id:
          valueType: STRING
        rbac.permissive.response_code:
          valueType: STRING
        request.api_key:
          valueType: STRING
        request.auth.audiences:
          valueType: STRING
        request.auth.claims:
          valueType: STRING_MAP
        request.auth.presenter:
          valueType: STRING
        request.auth.principal:
          valueType: STRING
        request.auth.raw_claims:
          valueType: STRING
        request.headers:
          valueType: STRING_MAP
        request.host:
          valueType: STRING
        request.id:
          valueType: STRING
        request.method:
          valueType: STRING
        request.path:
          valueType: STRING
        request.query_params:
          valueType: STRING_MAP
        request.reason:
          valueType: STRING
        request.referer:
          valueType: STRING
        request.scheme:
          valueType: STRING
        request.size:
          valueType: INT64
        request.time:
          valueType: TIMESTAMP
        request.total_size:
          valueType: INT64
        request.url_path:
          valueType: STRING
        request.useragent:
          valueType: STRING
        response.code:
          valueType: INT64
        response.duration:
          valueType: DURATION
        response.grpc_message:
          valueType: STRING
        response.grpc_status:
          valueType: STRING
        response.headers:
          valueType: STRING_MAP
        response.size:
          valueType: INT64
        response.time:
          valueType: TIMESTAMP
        response.total_size:
          valueType: INT64
        source.principal:
          valueType: STRING
        source.uid:
          valueType: STRING
        source.user:
          valueType: STRING
  access.yaml: |
    apiVersion: config.istio.io/v1alpha2
    kind: instance
    metadata:
      name: accesslog
      namespace: mesh-operator
    spec:
      compiledTemplate: logentry
      params:
        monitored_resource_type: '"global"'
        severity: '"Info"'
        timestamp: request.time
        variables:
          apiClaims: request.auth.raw_claims | ""
          apiKey: request.api_key | request.headers["x-api-key"] | ""
          clientTraceId: request.headers["x-client-trace-id"] | ""
          connection_security_policy: conditional((context.reporter.kind | "inbound")
            == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls",
            "none"))
          destinationApp: destination.labels["nsf.skiff.netease.com/app"] | ""
          destinationIp: destination.ip | ip("0.0.0.0")
          destinationName: destination.name | ""
          destinationNamespace: destination.namespace | ""
          destinationOwner: destination.owner | ""
          destinationPrincipal: destination.principal | ""
          destinationProject: destination.project | "unknown"
          destinationServiceHost: destination.service.host | request.host | ""
          destinationWorkload: destination.workload.name | ""
          grpcMessage: response.grpc_message | ""
          grpcStatus: response.grpc_status | ""
          httpAuthority: request.headers[":authority"] | request.host | ""
          latency: response.duration | "0ms"
          method: request.method | ""
          permissiveResponseCode: rbac.permissive.response_code | "none"
          permissiveResponsePolicyID: rbac.permissive.effective_policy_id | "none"
          protocol: request.scheme | context.protocol | "http"
          receivedBytes: request.total_size | 0
          referer: request.referer | ""
          reporter: conditional((context.reporter.kind | "inbound") == "outbound", "source",
            "destination")
          requestId: request.headers["x-request-id"] | ""
          requestSize: request.size | 0
          requestedServerName: connection.requested_server_name | ""
          responseCode: response.code | 0
          responseFlags: context.proxy_error_code | ""
          responseSize: response.size | 0
          responseTimestamp: response.time
          sentBytes: response.total_size | 0
          sourceApp: source.labels["nsf.skiff.netease.com/app"] | ""
          sourceIp: source.ip | ip("0.0.0.0")
          sourceName: source.name | ""
          sourceNamespace: source.namespace | ""
          sourceOwner: source.owner | ""
          sourcePrincipal: source.principal | ""
          sourceProject: source.project | "unknown"
          sourceWorkload: source.workload.name | ""
          url: request.path | ""
          urlPathPatterns: request.url_path_pattern | ""
          userAgent: request.useragent | ""
          xForwardedFor: request.headers["x-forwarded-for"] | "0.0.0.0"
    ---

    apiVersion: config.istio.io/v1alpha2
    kind: handler
    metadata:
      name: stdio
      namespace: mesh-operator
    spec:
      compiledAdapter: stdio
      params:
        outputAsJson: false
    ---

    apiVersion: config.istio.io/v1alpha2
    kind: rule
    metadata:
      name: stdio
      namespace: mesh-operator
    spec:
      actions:
      - handler: stdio
        instances:
        - accesslog
      match: context.protocol == "http" || context.protocol == "grpc"
    ---
    apiVersion: config.istio.io/v1alpha2
    kind: attributemanifest
    metadata:
      name: nsfapa
      namespace: mesh-operator
    spec:
      attributes:
        destination.project:
          valueType: STRING
        request.url_path_pattern:
          valueType: STRING
        source.project:
          valueType: STRING
---
  {{end}}
  {{end}}
