{{ if .Values.component }}
  {{ if .Values.component.globalSidecar }}
  {{ if .Values.component.globalSidecar.enable }}
  {{ $gs := .Values.component.globalSidecar }}
  {{ $gsPort := $gs.port | default 80 }}
  {{- range $.Values.module }}
    {{- if or (eq (default "" .name) "lazyload") (eq (default "" .kind) "lazyload") }}
      {{- if .general }}
        {{- if eq (default "cluster" .general.globalSidecarMode) "cluster" }}
          {{ $f := .general }}
          {{ $g := .global }}
          {{ $name := .name }}
          {{ $gsSvcPorts := list }}
          {{ $hasGsPort := false }}
          {{ $addEnvHeaderViaLua := .general.addEnvHeaderViaLua | default false }}
          {{ $autoPort := .general.autoPort }}
          {{ $passthroughByDefault := .general.passthroughByDefault | default false }}
          {{ $supportH2 := .general.supportH2 | default false }}
          {{ $clusterGsNamespace := .general.clusterGsNamespace | default $.Values.namespace }}
          {{ $cleanupWormholePort := .general.cleanupWormholePort | default false }}
          {{- range $f.wormholePort }}
             {{- if eq (int .) (int $gsPort) }}
                 {{ $hasGsPort = true }}
             {{- end -}}
             {{ $gsSvcPorts = append $gsSvcPorts . }}
          {{- end -}}
          {{- if not $hasGsPort }}
             {{ $gsSvcPorts = append $gsSvcPorts $gsPort }}
          {{- end -}}

{{- /*
Now, we will render all the resources of the global-sidecar, reset indentation for readability.
*/}}
{{- if or (not $autoPort) (eq (default "" $f.render) "lazyload") }}
---
apiVersion: v1
kind: Service
metadata:
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
  labels:
    app: global-sidecar
    service: global-sidecar
    slime.io/serviceFenced: "false"
spec:
  ports:
    {{- range $gsSvcPorts }}
    - name: http-{{ . }}
      port: {{ int . }}
      protocol: TCP
      targetPort: {{ int . }}
    {{- end }}
  selector:
    app: global-sidecar
  sessionAffinity: None
  type: ClusterIP
{{- end }}

---
{{- if $supportH2 }}
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
spec:
  host: global-sidecar.{{ $clusterGsNamespace }}.svc.cluster.local
  trafficPolicy:
    connectionPool:
      http:
        useClientProtocol: true
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
  labels:
    account: global-sidecar
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: global-sidecar
subjects:
  - kind: ServiceAccount
    name: global-sidecar
    namespace: {{ $clusterGsNamespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: global-sidecar
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: global-sidecar
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: global-sidecar
subjects:
- kind: ServiceAccount
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
{{- if or (not $autoPort) (eq (default "" $f.render) "lazyload") }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
  labels:
    lazyload.slime.io/config: global-sidecar
data:
  cfg: |-
    wormholePorts:
    {{- range $gsSvcPorts }}
    - {{ . }}
    {{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: global-sidecar
  namespace: {{ $clusterGsNamespace }}
  labels:
    app: global-sidecar
spec:
  replicas: {{ $gs.replicas | default 1 }}
  selector:
    matchLabels:
      app: global-sidecar
  template:
    metadata:
      annotations:
        proxy.istio.io/config: |
          proxyMetadata:
            ISTIO_META_SLIME_APP:
              LAZYLOAD_GLOBAL_SIDECAR
        {{- if ne (default "" $f.metricSourceType) "accesslog" }}
            ISTIO_META_ISTIO_VERSION:
              "999.0.0"
        {{- end }}
        {{- if eq (default "accesslog" $f.metricSourceType) "accesslog" }}
        sidecar.istio.io/bootstrapOverride: "lazyload-accesslog-source"
        {{- end }}
        {{- if $gs.sidecarInject }}
        {{- if $gs.sidecarInject.enable }}
        {{- with $gs.sidecarInject.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        {{- end }}
{{- /*
        {{- if $f.globalSidecar }}
        {{- if $f.globalSidecar.excludeInbounds }}
        traffic.sidecar.istio.io/excludeInboundPorts: {{ $f.globalSidecar.excludeInboundPorts }}
        {{- end }}
        {{- end }}
*/}}
      labels:
        app: global-sidecar
        {{- if $gs.sidecarInject }}
        {{- if $gs.sidecarInject.enable }}
        {{- if eq  $gs.sidecarInject.mode "pod" }}
        {{- with $gs.sidecarInject.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: global-sidecar
      containers:
        - name: global-sidecar
          env:
            - name: CLEAN_UP_WORMHOLE_PORT
              value: "{{ $cleanupWormholePort }}"
            - name: PROBE_PORT
              value: {{ default 18181 $gs.probePort | quote }}
            - name: LOG_LEVEL
              value: {{ if $g.log }}{{ default "info" $g.log.logLevel }}{{ else }}{{ "info" }}{{ end }}
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          {{- if $gs.image.tag }}
          image: "{{ $gs.image.repository }}:{{ $gs.image.tag}}"
          {{- else }}
          image: "{{ $gs.image.repository }}"
          {{- end }}
          imagePullPolicy: Always
          ports:
            {{- range $gsSvcPorts }}
            - containerPort: {{ int . }}
              protocol: TCP
            {{- end }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz/live
              port: {{ default 18181 $gs.probePort }}
              scheme: HTTP
            initialDelaySeconds: 600
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 15
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: {{ default 18181 $gs.probePort }}
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {{- toYaml $gs.resources | nindent 12 }}
          securityContext:
            privileged: true
{{- if and (eq (default "accesslog" $f.metricSourceType) "prometheus") (ne (default "" $f.render) "lazyload") }}
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: global-sidecar-metadata-exchange-remove
  namespace: {{ $clusterGsNamespace }}
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        proxy:
          metadata:
            SLIME_APP: LAZYLOAD_GLOBAL_SIDECAR
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: istio.metadata_exchange
      patch:
        operation: REMOVE
    - applyTo: HTTP_FILTER
      match:
        proxy:
          metadata:
            SLIME_APP: LAZYLOAD_GLOBAL_SIDECAR
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: istio.metadata_exchange
      patch:
        operation: REMOVE
    - applyTo: HTTP_FILTER
      match:
        proxy:
          metadata:
            SLIME_APP: LAZYLOAD_GLOBAL_SIDECAR
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: istio.metadata_exchange
      patch:
        operation: REMOVE
{{- end }}
{{- if or (not $autoPort) (eq (default "" $f.render) "lazyload") }}
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: to-global-sidecar
  namespace:  {{ $.Values.istioNamespace }}
spec:
  configPatches:
    {{- range $gsSvcPorts }}
    {{- with $wormholePort := . }}
    - applyTo: VIRTUAL_HOST
      match:
        context: SIDECAR_OUTBOUND
        routeConfiguration:
          name: "{{ . }}"
          vhost:
            name: allow_any
      {{- if $f.proxyVersion }}
        proxy:
          proxyVersion: {{ $f.proxyVersion }}
      {{- end }}
      patch:
        operation: REMOVE
    - applyTo: ROUTE_CONFIGURATION
      match:
        context: SIDECAR_OUTBOUND
        routeConfiguration:
          name: "{{ . }}"
      {{- if $f.proxyVersion }}
        proxy:
          proxyVersion: {{ $f.proxyVersion }}
      {{- end }}
      patch:
        operation: MERGE
        value:
          virtual_hosts:
            {{- if $f.dispatches }}
            {{- range $f.dispatches }}
            {{- if or (not .domainRegex) (eq (default "" .domainRegex) "") }}
            - domains:
              {{- toYaml .domains | nindent 14 }}
              name: {{ .name }}
              routes:
                - match:
                    prefix: /
                  route:
                    timeout: 0s
                  {{- if eq .cluster "_GLOBAL_SIDECAR" }}
                    cluster: outbound|{{ $gsPort }}||global-sidecar.{{ $clusterGsNamespace }}.svc.cluster.local
                  request_headers_to_add:
                    - header:
                        key: "Slime-Orig-Dest"
                        value: "%DOWNSTREAM_LOCAL_ADDRESS%"
                      append: false
                    {{- if ne $addEnvHeaderViaLua true }}
                    - header:
                        key: "Slime-Source-Ns"
                        value: "%ENVIRONMENT(POD_NAMESPACE)%"
                      append: false
                    {{- end }}
                  {{- else }}
                    cluster: {{ tpl .cluster $ }}
                  {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
            - domains:
              - '*'
              name: allow_all
              routes:
                {{- if $f.dispatches }}
                {{- range $f.dispatches }}
                {{- if .domainRegex }}
                - match:
                    prefix: /
                    headers:
                    - name: ':authority'
                      string_match:
                        safe_regex:
                          google_re2: {}
                          regex: {{ .domainRegex }}
                  route:
                    timeout: 0s
                    {{- if eq .cluster "_GLOBAL_SIDECAR" }}
                    cluster: outbound|{{ $gsPort }}||global-sidecar.{{ $clusterGsNamespace }}.svc.cluster.local
                  request_headers_to_add:
                    - header:
                        key: "Slime-Orig-Dest"
                        value: "%DOWNSTREAM_LOCAL_ADDRESS%"
                      append: false
                    {{- if ne $addEnvHeaderViaLua true }}
                    - header:
                        key: "Slime-Source-Ns"
                        value: "%ENVIRONMENT(POD_NAMESPACE)%"
                      append: false
                    {{- end }}
                    {{- else }}
                    cluster: {{ tpl .cluster $ }}
                    {{- end }}
                {{- end }}
                {{- end }}
                {{- end }}
                - match:
                    prefix: /
                  route:
                    timeout: 0s
                    {{- if $passthroughByDefault }}
                    cluster: PassthroughCluster
                    {{- else }}
                    cluster: outbound|{{ $gsPort }}||global-sidecar.{{ $clusterGsNamespace }}.svc.cluster.local
                  request_headers_to_add:
                    - header:
                        key: "Slime-Orig-Dest"
                        value: "%DOWNSTREAM_LOCAL_ADDRESS%"
                      append: false
                    {{- if ne $addEnvHeaderViaLua true }}
                    - header:
                        key: "Slime-Source-Ns"
                        value: "%ENVIRONMENT(POD_NAMESPACE)%"
                      append: false
                    {{- end }}
                    {{- end }}
{{- if eq $addEnvHeaderViaLua true }}
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        {{- if $f.proxyVersion }}
        proxy:
          proxyVersion: {{ $f.proxyVersion }}
        {{- end }}
        listener:
          name: 0.0.0.0_{{ . }}
          filterChain:
            filter:
            {{- if $gs.legacyFilterName }}
              name: "envoy.http_connection_manager"
              subFilter:
                name: "envoy.router"
            {{- else }}
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
            {{- end }}
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inline_code: |
              -- place holder
            # compatiable with istio 1.7+
            source_codes:
              add.lua:
                inline_string: |
                  function envoy_on_request(request_handle)
                    request_handle:headers():replace("Slime-Source-Ns", os.getenv("POD_NAMESPACE"))
                  end
    - applyTo: HTTP_ROUTE
      match :
        context: SIDECAR_OUTBOUND
        routeConfiguration:
          name: "{{ . }}"
          vhost:
            name: allow_all
      {{- if $f.proxyVersion }}
        proxy:
          proxyVersion: {{ $f.proxyVersion }}
      {{- end }}
      patch:
        operation: MERGE
        value:
          typed_per_filter_config:
            envoy.filters.http.lua:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
              name: add.lua
{{- end }}
    - applyTo: VIRTUAL_HOST
      match:
        proxy:
          metadata:
            SLIME_APP: LAZYLOAD_GLOBAL_SIDECAR
        context: SIDECAR_OUTBOUND
        routeConfiguration:
          name: "{{ . }}"
          vhost:
            name: allow_all
      patch:
        operation: REMOVE
    {{- if $f.dispatches }}
    {{- range $f.dispatches }}
    {{- if or (not .domainRegex) (eq (default "" .domainRegex) "") }}
    - applyTo: VIRTUAL_HOST
      match:
        proxy:
          metadata:
            SLIME_APP: LAZYLOAD_GLOBAL_SIDECAR
        context: SIDECAR_OUTBOUND
        routeConfiguration:
          name: '{{ $wormholePort }}'
          vhost:
            name: {{ .name }}
      patch:
        operation: REMOVE
    {{- end }}
    {{- end }}
    {{- end }}
    - applyTo: ROUTE_CONFIGURATION
      match:
        proxy:
          metadata:
            SLIME_APP: LAZYLOAD_GLOBAL_SIDECAR
        context: SIDECAR_OUTBOUND
        routeConfiguration:
          name: "{{ . }}"
      patch:
        operation: MERGE
        value:
          virtual_hosts:
            - domains:
                - '*'
              name: allow_any_new
              routes:
                - match:
                    prefix: /
                  route:
                    cluster: PassthroughCluster
                    timeout: 0s
    {{- end }}
    {{- end }}
{{- end }}
{{- if and (eq (default "accesslog" $f.metricSourceType) "accesslog") (ne (default "" $f.render) "lazyload") }}
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: global-sidecar-accesslog
  namespace: {{ $clusterGsNamespace }}
spec:
  workloadSelector:
    labels:
      app: global-sidecar
  configPatches:
    - applyTo: NETWORK_FILTER
      match:
        #context: GATEWAY
        listener:
          filterChain:
            filter:
            {{- if $gs.legacyFilterName }}
              name: "envoy.http_connection_manager"
            {{- else }}
              name: "envoy.filters.network.http_connection_manager"
            {{- end }}
      patch:
        operation: MERGE
        value:
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
            access_log:
              - name: envoy.access_loggers.http_grpc
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
                  common_config:
                    log_name: http_envoy_accesslog
                    transport_api_version: "V3"
                    grpc_service:
                      envoy_grpc:
                        cluster_name: lazyload-accesslog-source
{{- end }}
---
{{- if and (eq (default "accesslog" $f.metricSourceType) "accesslog") (ne (default "" $f.render) "lazyload") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: lazyload-accesslog-source
  namespace: {{ $clusterGsNamespace }}
data:
  custom_bootstrap.json: |
    {
      "static_resources": {
        "clusters": [{
          "name": "lazyload-accesslog-source",
          "type": "STRICT_DNS",
          "connect_timeout": "5s",
          "http2_protocol_options": {},
          "dns_lookup_family": "V4_ONLY",
          "load_assignment": {
            "cluster_name": "lazyload-accesslog-source",
            "endpoints": [{
              "lb_endpoints": [{
                "endpoint": {
                  "address": {
                    "socket_address": {
                      {{- if $g.misc }}
                      {{- if eq (default "off" $g.misc.enableLeaderElection ) "on" }}
                      "address": "{{ .name }}-leader.{{ $g.slimeNamespace }}",
                      {{- else }}
                      "address": "{{ .name }}.{{ $g.slimeNamespace }}",
                      {{- end }}
                      {{- else }}
                      "address": "{{ .name }}.{{ $g.slimeNamespace }}",
                      {{- end }}
                      "port_value": {{ $.Values.service.logSourcePort }}
                    }
                  }
                }
              }]
            }]
          },
          "respect_dns_ttl": true
        }]
      }
    }
{{- end }}
{{- /*
Now that we've rendered all the resources for the global-sidecar, restore the indentation.
*/}}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{- end }}
{{- end }}
