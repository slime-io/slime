syntax = "proto3";

package slime.config.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option go_package = "slime.io/slime/framework/apis/config/v1alpha1";

message LocalSource {
  string mount = 1;
}

message RemoteSource {
  string address = 1;
}

message Plugin {
  oneof wasm_source {
    LocalSource local = 2;
    RemoteSource remote = 3;
  }
}

message Limiter {
  enum RateLimitBackend {
    netEaseLocalFlowControl = 0;
    envoyLocalRateLimit = 1;
  }
  RateLimitBackend backend = 3;
  google.protobuf.Duration refresh = 4 [(gogoproto.stdduration) = true];
  bool disableGlobalRateLimit = 5;
  bool disableAdaptive = 6;
  bool enableServiceEntry = 7;
}

message Global {
  string service = 1;
  string multicluster = 2;
  string istioNamespace = 3;
  string slimeNamespace = 4;
  Log log = 5;
  map<string, string> misc = 6;
  string istioRev = 7;
  bool strictRev = 8;
  // ConfigSource describes a source of configuration data for networking
  // rules, and other Istio configuration artifacts. Multiple data sources
  // can be configured for a single control plane.
  repeated ConfigSource configSources = 9;
  // specify the address of k8s api-server instead of default value
  string masterUrl = 10;
  // configRev is the value used by slime configController to fetch/filter configs
  // in format comma-separated revisions, e.g. "1-11-1,prod"
  // will add istioRev to configRev if it exists
  string configRev = 11;
}

message Log {
  string logLevel = 1;
  int32 klogLevel = 2;
  bool logRotate = 3;
  LogRotateConfig logRotateConfig = 4;
}

message LogRotateConfig {
  string filePath = 1;
  int32 maxSizeMB = 2;
  int32 maxBackups = 3;
  int32 maxAgeDay = 4;
  bool compress = 5;
}

message Fence {
  repeated string wormholePort = 2;
}

message Prometheus_Source{
  enum Type{
    Value = 0;
    Group = 1;
  }
  message Handler{
    string query = 1;
    Type type = 2;
  }
  string address = 1;
  map<string, Handler> handlers = 2;
}

message K8S_Source{
  repeated string handlers = 1;
}

message Metric{
  Prometheus_Source prometheus = 1;
  K8S_Source k8s = 2;
}

message General {// general module
}

message Bundle {
  message Item {
    // submodule name, custom value, necessary
    string name = 1;
    // submodule kind, can only be one of real module kinds, like limiter, necessary
    string kind = 2;
  }
  repeated Item modules = 1;
}

message Config {
  Plugin plugin = 1;
  Limiter limiter = 2;
  Global global = 3;
  Fence fence = 4;
  Metric metric = 6;
  string name = 5;
  bool enable = 7;
  General general = 8;  // general module config
  Bundle bundle = 9;
  enum Mode {
    Module = 0;
    BundleItem = 1;
  }
  Mode mode = 10;
  // like bundle item kind, necessary if not bundle
  string kind = 11;
}

// ConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
message ConfigSource {
  // Address of the server implementing the Istio Mesh Configuration
  // protocol (MCP). Can be IP address or a fully qualified DNS name.
  // Use fs:/// to specify a file-based backend with absolute path to the directory.
  string address = 1;
}
